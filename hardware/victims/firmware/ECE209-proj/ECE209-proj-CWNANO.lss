
ECE209-proj-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002074  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080021fc  080021fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080021fc  080021fc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080021fc  080021fc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021fc  080021fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000014  08002218  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000120  08002218  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      0000002b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b33  00000000  00000000  00020067  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000a86  00000000  00000000  00022b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000014eb  00000000  00000000  00023620  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000258  00000000  00000000  00024b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002f0  00000000  00000000  00024d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001033  00000000  00000000  00025058  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000108c  00000000  00000000  0002608b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00000550  00000000  00000000  00027118  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  00027668  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  000277ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018a:	4806      	ldr	r0, [pc, #24]	; (80001a4 <deregister_tm_clones+0x1c>)
 800018c:	3303      	adds	r3, #3
 800018e:	b510      	push	{r4, lr}
 8000190:	1a1b      	subs	r3, r3, r0
 8000192:	2b06      	cmp	r3, #6
 8000194:	d903      	bls.n	800019e <deregister_tm_clones+0x16>
 8000196:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <deregister_tm_clones+0x20>)
 8000198:	2b00      	cmp	r3, #0
 800019a:	d000      	beq.n	800019e <deregister_tm_clones+0x16>
 800019c:	4798      	blx	r3
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4806      	ldr	r0, [pc, #24]	; (80001c8 <register_tm_clones+0x1c>)
 80001ae:	4907      	ldr	r1, [pc, #28]	; (80001cc <register_tm_clones+0x20>)
 80001b0:	b510      	push	{r4, lr}
 80001b2:	1a09      	subs	r1, r1, r0
 80001b4:	1089      	asrs	r1, r1, #2
 80001b6:	0fcb      	lsrs	r3, r1, #31
 80001b8:	1859      	adds	r1, r3, r1
 80001ba:	1049      	asrs	r1, r1, #1
 80001bc:	d003      	beq.n	80001c6 <register_tm_clones+0x1a>
 80001be:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <register_tm_clones+0x24>)
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d000      	beq.n	80001c6 <register_tm_clones+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	20000014 	.word	0x20000014
 80001d0:	00000000 	.word	0x00000000

080001d4 <__do_global_dtors_aux>:
 80001d4:	b510      	push	{r4, lr}
 80001d6:	4c07      	ldr	r4, [pc, #28]	; (80001f4 <__do_global_dtors_aux+0x20>)
 80001d8:	7823      	ldrb	r3, [r4, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d109      	bne.n	80001f2 <__do_global_dtors_aux+0x1e>
 80001de:	f7ff ffd3 	bl	8000188 <deregister_tm_clones>
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x24>)
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <__do_global_dtors_aux+0x1a>
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x28>)
 80001ea:	e000      	b.n	80001ee <__do_global_dtors_aux+0x1a>
 80001ec:	bf00      	nop
 80001ee:	2301      	movs	r3, #1
 80001f0:	7023      	strb	r3, [r4, #0]
 80001f2:	bd10      	pop	{r4, pc}
 80001f4:	20000014 	.word	0x20000014
 80001f8:	00000000 	.word	0x00000000
 80001fc:	080021e4 	.word	0x080021e4

08000200 <frame_dummy>:
 8000200:	4b09      	ldr	r3, [pc, #36]	; (8000228 <frame_dummy+0x28>)
 8000202:	b510      	push	{r4, lr}
 8000204:	2b00      	cmp	r3, #0
 8000206:	d003      	beq.n	8000210 <frame_dummy+0x10>
 8000208:	4908      	ldr	r1, [pc, #32]	; (800022c <frame_dummy+0x2c>)
 800020a:	4809      	ldr	r0, [pc, #36]	; (8000230 <frame_dummy+0x30>)
 800020c:	e000      	b.n	8000210 <frame_dummy+0x10>
 800020e:	bf00      	nop
 8000210:	4808      	ldr	r0, [pc, #32]	; (8000234 <frame_dummy+0x34>)
 8000212:	6803      	ldr	r3, [r0, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d102      	bne.n	800021e <frame_dummy+0x1e>
 8000218:	f7ff ffc8 	bl	80001ac <register_tm_clones>
 800021c:	bd10      	pop	{r4, pc}
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <frame_dummy+0x38>)
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0f9      	beq.n	8000218 <frame_dummy+0x18>
 8000224:	4798      	blx	r3
 8000226:	e7f7      	b.n	8000218 <frame_dummy+0x18>
 8000228:	00000000 	.word	0x00000000
 800022c:	20000018 	.word	0x20000018
 8000230:	080021e4 	.word	0x080021e4
 8000234:	20000014 	.word	0x20000014
 8000238:	00000000 	.word	0x00000000

0800023c <__udivsi3>:
 800023c:	2200      	movs	r2, #0
 800023e:	0843      	lsrs	r3, r0, #1
 8000240:	428b      	cmp	r3, r1
 8000242:	d374      	bcc.n	800032e <__udivsi3+0xf2>
 8000244:	0903      	lsrs	r3, r0, #4
 8000246:	428b      	cmp	r3, r1
 8000248:	d35f      	bcc.n	800030a <__udivsi3+0xce>
 800024a:	0a03      	lsrs	r3, r0, #8
 800024c:	428b      	cmp	r3, r1
 800024e:	d344      	bcc.n	80002da <__udivsi3+0x9e>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d328      	bcc.n	80002a8 <__udivsi3+0x6c>
 8000256:	0c03      	lsrs	r3, r0, #16
 8000258:	428b      	cmp	r3, r1
 800025a:	d30d      	bcc.n	8000278 <__udivsi3+0x3c>
 800025c:	22ff      	movs	r2, #255	; 0xff
 800025e:	0209      	lsls	r1, r1, #8
 8000260:	ba12      	rev	r2, r2
 8000262:	0c03      	lsrs	r3, r0, #16
 8000264:	428b      	cmp	r3, r1
 8000266:	d302      	bcc.n	800026e <__udivsi3+0x32>
 8000268:	1212      	asrs	r2, r2, #8
 800026a:	0209      	lsls	r1, r1, #8
 800026c:	d065      	beq.n	800033a <__udivsi3+0xfe>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d319      	bcc.n	80002a8 <__udivsi3+0x6c>
 8000274:	e000      	b.n	8000278 <__udivsi3+0x3c>
 8000276:	0a09      	lsrs	r1, r1, #8
 8000278:	0bc3      	lsrs	r3, r0, #15
 800027a:	428b      	cmp	r3, r1
 800027c:	d301      	bcc.n	8000282 <__udivsi3+0x46>
 800027e:	03cb      	lsls	r3, r1, #15
 8000280:	1ac0      	subs	r0, r0, r3
 8000282:	4152      	adcs	r2, r2
 8000284:	0b83      	lsrs	r3, r0, #14
 8000286:	428b      	cmp	r3, r1
 8000288:	d301      	bcc.n	800028e <__udivsi3+0x52>
 800028a:	038b      	lsls	r3, r1, #14
 800028c:	1ac0      	subs	r0, r0, r3
 800028e:	4152      	adcs	r2, r2
 8000290:	0b43      	lsrs	r3, r0, #13
 8000292:	428b      	cmp	r3, r1
 8000294:	d301      	bcc.n	800029a <__udivsi3+0x5e>
 8000296:	034b      	lsls	r3, r1, #13
 8000298:	1ac0      	subs	r0, r0, r3
 800029a:	4152      	adcs	r2, r2
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d301      	bcc.n	80002a6 <__udivsi3+0x6a>
 80002a2:	030b      	lsls	r3, r1, #12
 80002a4:	1ac0      	subs	r0, r0, r3
 80002a6:	4152      	adcs	r2, r2
 80002a8:	0ac3      	lsrs	r3, r0, #11
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d301      	bcc.n	80002b2 <__udivsi3+0x76>
 80002ae:	02cb      	lsls	r3, r1, #11
 80002b0:	1ac0      	subs	r0, r0, r3
 80002b2:	4152      	adcs	r2, r2
 80002b4:	0a83      	lsrs	r3, r0, #10
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d301      	bcc.n	80002be <__udivsi3+0x82>
 80002ba:	028b      	lsls	r3, r1, #10
 80002bc:	1ac0      	subs	r0, r0, r3
 80002be:	4152      	adcs	r2, r2
 80002c0:	0a43      	lsrs	r3, r0, #9
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__udivsi3+0x8e>
 80002c6:	024b      	lsls	r3, r1, #9
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__udivsi3+0x9a>
 80002d2:	020b      	lsls	r3, r1, #8
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	d2cd      	bcs.n	8000276 <__udivsi3+0x3a>
 80002da:	09c3      	lsrs	r3, r0, #7
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__udivsi3+0xa8>
 80002e0:	01cb      	lsls	r3, r1, #7
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0983      	lsrs	r3, r0, #6
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__udivsi3+0xb4>
 80002ec:	018b      	lsls	r3, r1, #6
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0943      	lsrs	r3, r0, #5
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__udivsi3+0xc0>
 80002f8:	014b      	lsls	r3, r1, #5
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0903      	lsrs	r3, r0, #4
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__udivsi3+0xcc>
 8000304:	010b      	lsls	r3, r1, #4
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	08c3      	lsrs	r3, r0, #3
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__udivsi3+0xd8>
 8000310:	00cb      	lsls	r3, r1, #3
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	0883      	lsrs	r3, r0, #2
 8000318:	428b      	cmp	r3, r1
 800031a:	d301      	bcc.n	8000320 <__udivsi3+0xe4>
 800031c:	008b      	lsls	r3, r1, #2
 800031e:	1ac0      	subs	r0, r0, r3
 8000320:	4152      	adcs	r2, r2
 8000322:	0843      	lsrs	r3, r0, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d301      	bcc.n	800032c <__udivsi3+0xf0>
 8000328:	004b      	lsls	r3, r1, #1
 800032a:	1ac0      	subs	r0, r0, r3
 800032c:	4152      	adcs	r2, r2
 800032e:	1a41      	subs	r1, r0, r1
 8000330:	d200      	bcs.n	8000334 <__udivsi3+0xf8>
 8000332:	4601      	mov	r1, r0
 8000334:	4152      	adcs	r2, r2
 8000336:	4610      	mov	r0, r2
 8000338:	4770      	bx	lr
 800033a:	e7ff      	b.n	800033c <__udivsi3+0x100>
 800033c:	b501      	push	{r0, lr}
 800033e:	2000      	movs	r0, #0
 8000340:	f000 f806 	bl	8000350 <__aeabi_idiv0>
 8000344:	bd02      	pop	{r1, pc}
 8000346:	46c0      	nop			; (mov r8, r8)

08000348 <__aeabi_uidivmod>:
 8000348:	2900      	cmp	r1, #0
 800034a:	d0f7      	beq.n	800033c <__udivsi3+0x100>
 800034c:	e776      	b.n	800023c <__udivsi3>
 800034e:	4770      	bx	lr

08000350 <__aeabi_idiv0>:
 8000350:	4770      	bx	lr
 8000352:	46c0      	nop			; (mov r8, r8)

08000354 <__aeabi_fadd>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	024a      	lsls	r2, r1, #9
 8000358:	0243      	lsls	r3, r0, #9
 800035a:	0044      	lsls	r4, r0, #1
 800035c:	004e      	lsls	r6, r1, #1
 800035e:	0fc5      	lsrs	r5, r0, #31
 8000360:	0e24      	lsrs	r4, r4, #24
 8000362:	0028      	movs	r0, r5
 8000364:	099b      	lsrs	r3, r3, #6
 8000366:	0e36      	lsrs	r6, r6, #24
 8000368:	0fc9      	lsrs	r1, r1, #31
 800036a:	0992      	lsrs	r2, r2, #6
 800036c:	428d      	cmp	r5, r1
 800036e:	d059      	beq.n	8000424 <__aeabi_fadd+0xd0>
 8000370:	1ba0      	subs	r0, r4, r6
 8000372:	2800      	cmp	r0, #0
 8000374:	dc00      	bgt.n	8000378 <__aeabi_fadd+0x24>
 8000376:	e08d      	b.n	8000494 <__aeabi_fadd+0x140>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d11a      	bne.n	80003b2 <__aeabi_fadd+0x5e>
 800037c:	2a00      	cmp	r2, #0
 800037e:	d000      	beq.n	8000382 <__aeabi_fadd+0x2e>
 8000380:	e079      	b.n	8000476 <__aeabi_fadd+0x122>
 8000382:	075a      	lsls	r2, r3, #29
 8000384:	d004      	beq.n	8000390 <__aeabi_fadd+0x3c>
 8000386:	220f      	movs	r2, #15
 8000388:	401a      	ands	r2, r3
 800038a:	2a04      	cmp	r2, #4
 800038c:	d000      	beq.n	8000390 <__aeabi_fadd+0x3c>
 800038e:	3304      	adds	r3, #4
 8000390:	015a      	lsls	r2, r3, #5
 8000392:	d538      	bpl.n	8000406 <__aeabi_fadd+0xb2>
 8000394:	3401      	adds	r4, #1
 8000396:	2cff      	cmp	r4, #255	; 0xff
 8000398:	d100      	bne.n	800039c <__aeabi_fadd+0x48>
 800039a:	e089      	b.n	80004b0 <__aeabi_fadd+0x15c>
 800039c:	0028      	movs	r0, r5
 800039e:	019b      	lsls	r3, r3, #6
 80003a0:	0a5b      	lsrs	r3, r3, #9
 80003a2:	b2e4      	uxtb	r4, r4
 80003a4:	025b      	lsls	r3, r3, #9
 80003a6:	05e4      	lsls	r4, r4, #23
 80003a8:	0a5b      	lsrs	r3, r3, #9
 80003aa:	4323      	orrs	r3, r4
 80003ac:	07c0      	lsls	r0, r0, #31
 80003ae:	4318      	orrs	r0, r3
 80003b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003b2:	2cff      	cmp	r4, #255	; 0xff
 80003b4:	d0e5      	beq.n	8000382 <__aeabi_fadd+0x2e>
 80003b6:	2180      	movs	r1, #128	; 0x80
 80003b8:	04c9      	lsls	r1, r1, #19
 80003ba:	430a      	orrs	r2, r1
 80003bc:	281b      	cmp	r0, #27
 80003be:	dd00      	ble.n	80003c2 <__aeabi_fadd+0x6e>
 80003c0:	e089      	b.n	80004d6 <__aeabi_fadd+0x182>
 80003c2:	0016      	movs	r6, r2
 80003c4:	2120      	movs	r1, #32
 80003c6:	40c6      	lsrs	r6, r0
 80003c8:	1a08      	subs	r0, r1, r0
 80003ca:	4082      	lsls	r2, r0
 80003cc:	1e51      	subs	r1, r2, #1
 80003ce:	418a      	sbcs	r2, r1
 80003d0:	4332      	orrs	r2, r6
 80003d2:	1a9b      	subs	r3, r3, r2
 80003d4:	015a      	lsls	r2, r3, #5
 80003d6:	d514      	bpl.n	8000402 <__aeabi_fadd+0xae>
 80003d8:	019b      	lsls	r3, r3, #6
 80003da:	099e      	lsrs	r6, r3, #6
 80003dc:	0030      	movs	r0, r6
 80003de:	f000 f999 	bl	8000714 <__clzsi2>
 80003e2:	3805      	subs	r0, #5
 80003e4:	4086      	lsls	r6, r0
 80003e6:	4284      	cmp	r4, r0
 80003e8:	dc65      	bgt.n	80004b6 <__aeabi_fadd+0x162>
 80003ea:	1b04      	subs	r4, r0, r4
 80003ec:	0033      	movs	r3, r6
 80003ee:	2020      	movs	r0, #32
 80003f0:	3401      	adds	r4, #1
 80003f2:	40e3      	lsrs	r3, r4
 80003f4:	1b04      	subs	r4, r0, r4
 80003f6:	40a6      	lsls	r6, r4
 80003f8:	1e72      	subs	r2, r6, #1
 80003fa:	4196      	sbcs	r6, r2
 80003fc:	2400      	movs	r4, #0
 80003fe:	4333      	orrs	r3, r6
 8000400:	e7bf      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000402:	075a      	lsls	r2, r3, #29
 8000404:	d1bf      	bne.n	8000386 <__aeabi_fadd+0x32>
 8000406:	08df      	lsrs	r7, r3, #3
 8000408:	0028      	movs	r0, r5
 800040a:	2cff      	cmp	r4, #255	; 0xff
 800040c:	d12f      	bne.n	800046e <__aeabi_fadd+0x11a>
 800040e:	2f00      	cmp	r7, #0
 8000410:	d100      	bne.n	8000414 <__aeabi_fadd+0xc0>
 8000412:	e087      	b.n	8000524 <__aeabi_fadd+0x1d0>
 8000414:	2280      	movs	r2, #128	; 0x80
 8000416:	03d2      	lsls	r2, r2, #15
 8000418:	0013      	movs	r3, r2
 800041a:	433b      	orrs	r3, r7
 800041c:	025b      	lsls	r3, r3, #9
 800041e:	0a5b      	lsrs	r3, r3, #9
 8000420:	24ff      	movs	r4, #255	; 0xff
 8000422:	e7bf      	b.n	80003a4 <__aeabi_fadd+0x50>
 8000424:	1ba1      	subs	r1, r4, r6
 8000426:	2900      	cmp	r1, #0
 8000428:	dd49      	ble.n	80004be <__aeabi_fadd+0x16a>
 800042a:	2e00      	cmp	r6, #0
 800042c:	d029      	beq.n	8000482 <__aeabi_fadd+0x12e>
 800042e:	2cff      	cmp	r4, #255	; 0xff
 8000430:	d0a7      	beq.n	8000382 <__aeabi_fadd+0x2e>
 8000432:	2680      	movs	r6, #128	; 0x80
 8000434:	04f6      	lsls	r6, r6, #19
 8000436:	4332      	orrs	r2, r6
 8000438:	291b      	cmp	r1, #27
 800043a:	dd00      	ble.n	800043e <__aeabi_fadd+0xea>
 800043c:	e08d      	b.n	800055a <__aeabi_fadd+0x206>
 800043e:	0017      	movs	r7, r2
 8000440:	2620      	movs	r6, #32
 8000442:	40cf      	lsrs	r7, r1
 8000444:	1a71      	subs	r1, r6, r1
 8000446:	408a      	lsls	r2, r1
 8000448:	1e51      	subs	r1, r2, #1
 800044a:	418a      	sbcs	r2, r1
 800044c:	433a      	orrs	r2, r7
 800044e:	189b      	adds	r3, r3, r2
 8000450:	015a      	lsls	r2, r3, #5
 8000452:	d5d6      	bpl.n	8000402 <__aeabi_fadd+0xae>
 8000454:	3401      	adds	r4, #1
 8000456:	2cff      	cmp	r4, #255	; 0xff
 8000458:	d064      	beq.n	8000524 <__aeabi_fadd+0x1d0>
 800045a:	2201      	movs	r2, #1
 800045c:	4976      	ldr	r1, [pc, #472]	; (8000638 <__aeabi_fadd+0x2e4>)
 800045e:	401a      	ands	r2, r3
 8000460:	085b      	lsrs	r3, r3, #1
 8000462:	400b      	ands	r3, r1
 8000464:	4313      	orrs	r3, r2
 8000466:	e78c      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d1ca      	bne.n	8000402 <__aeabi_fadd+0xae>
 800046c:	2000      	movs	r0, #0
 800046e:	027b      	lsls	r3, r7, #9
 8000470:	0a5b      	lsrs	r3, r3, #9
 8000472:	b2e4      	uxtb	r4, r4
 8000474:	e796      	b.n	80003a4 <__aeabi_fadd+0x50>
 8000476:	3801      	subs	r0, #1
 8000478:	2800      	cmp	r0, #0
 800047a:	d0aa      	beq.n	80003d2 <__aeabi_fadd+0x7e>
 800047c:	2cff      	cmp	r4, #255	; 0xff
 800047e:	d19d      	bne.n	80003bc <__aeabi_fadd+0x68>
 8000480:	e77f      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000482:	2a00      	cmp	r2, #0
 8000484:	d100      	bne.n	8000488 <__aeabi_fadd+0x134>
 8000486:	e77c      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000488:	3901      	subs	r1, #1
 800048a:	2900      	cmp	r1, #0
 800048c:	d0df      	beq.n	800044e <__aeabi_fadd+0xfa>
 800048e:	2cff      	cmp	r4, #255	; 0xff
 8000490:	d1d2      	bne.n	8000438 <__aeabi_fadd+0xe4>
 8000492:	e776      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000494:	2800      	cmp	r0, #0
 8000496:	d120      	bne.n	80004da <__aeabi_fadd+0x186>
 8000498:	1c60      	adds	r0, r4, #1
 800049a:	b2c0      	uxtb	r0, r0
 800049c:	2801      	cmp	r0, #1
 800049e:	dd53      	ble.n	8000548 <__aeabi_fadd+0x1f4>
 80004a0:	2780      	movs	r7, #128	; 0x80
 80004a2:	1a9e      	subs	r6, r3, r2
 80004a4:	04ff      	lsls	r7, r7, #19
 80004a6:	4037      	ands	r7, r6
 80004a8:	d02f      	beq.n	800050a <__aeabi_fadd+0x1b6>
 80004aa:	1ad6      	subs	r6, r2, r3
 80004ac:	000d      	movs	r5, r1
 80004ae:	e795      	b.n	80003dc <__aeabi_fadd+0x88>
 80004b0:	0028      	movs	r0, r5
 80004b2:	2300      	movs	r3, #0
 80004b4:	e776      	b.n	80003a4 <__aeabi_fadd+0x50>
 80004b6:	4b61      	ldr	r3, [pc, #388]	; (800063c <__aeabi_fadd+0x2e8>)
 80004b8:	1a24      	subs	r4, r4, r0
 80004ba:	4033      	ands	r3, r6
 80004bc:	e761      	b.n	8000382 <__aeabi_fadd+0x2e>
 80004be:	2900      	cmp	r1, #0
 80004c0:	d14d      	bne.n	800055e <__aeabi_fadd+0x20a>
 80004c2:	1c61      	adds	r1, r4, #1
 80004c4:	b2ce      	uxtb	r6, r1
 80004c6:	2e01      	cmp	r6, #1
 80004c8:	dd2f      	ble.n	800052a <__aeabi_fadd+0x1d6>
 80004ca:	29ff      	cmp	r1, #255	; 0xff
 80004cc:	d02a      	beq.n	8000524 <__aeabi_fadd+0x1d0>
 80004ce:	189b      	adds	r3, r3, r2
 80004d0:	085b      	lsrs	r3, r3, #1
 80004d2:	000c      	movs	r4, r1
 80004d4:	e755      	b.n	8000382 <__aeabi_fadd+0x2e>
 80004d6:	2201      	movs	r2, #1
 80004d8:	e77b      	b.n	80003d2 <__aeabi_fadd+0x7e>
 80004da:	2c00      	cmp	r4, #0
 80004dc:	d11b      	bne.n	8000516 <__aeabi_fadd+0x1c2>
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d05b      	beq.n	800059a <__aeabi_fadd+0x246>
 80004e2:	43c0      	mvns	r0, r0
 80004e4:	2800      	cmp	r0, #0
 80004e6:	d00c      	beq.n	8000502 <__aeabi_fadd+0x1ae>
 80004e8:	2eff      	cmp	r6, #255	; 0xff
 80004ea:	d07e      	beq.n	80005ea <__aeabi_fadd+0x296>
 80004ec:	281b      	cmp	r0, #27
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_fadd+0x19e>
 80004f0:	e092      	b.n	8000618 <__aeabi_fadd+0x2c4>
 80004f2:	001d      	movs	r5, r3
 80004f4:	2420      	movs	r4, #32
 80004f6:	40c5      	lsrs	r5, r0
 80004f8:	1a20      	subs	r0, r4, r0
 80004fa:	4083      	lsls	r3, r0
 80004fc:	1e58      	subs	r0, r3, #1
 80004fe:	4183      	sbcs	r3, r0
 8000500:	432b      	orrs	r3, r5
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	0034      	movs	r4, r6
 8000506:	000d      	movs	r5, r1
 8000508:	e764      	b.n	80003d4 <__aeabi_fadd+0x80>
 800050a:	2e00      	cmp	r6, #0
 800050c:	d000      	beq.n	8000510 <__aeabi_fadd+0x1bc>
 800050e:	e765      	b.n	80003dc <__aeabi_fadd+0x88>
 8000510:	2000      	movs	r0, #0
 8000512:	2400      	movs	r4, #0
 8000514:	e7ab      	b.n	800046e <__aeabi_fadd+0x11a>
 8000516:	2eff      	cmp	r6, #255	; 0xff
 8000518:	d067      	beq.n	80005ea <__aeabi_fadd+0x296>
 800051a:	2480      	movs	r4, #128	; 0x80
 800051c:	04e4      	lsls	r4, r4, #19
 800051e:	4240      	negs	r0, r0
 8000520:	4323      	orrs	r3, r4
 8000522:	e7e3      	b.n	80004ec <__aeabi_fadd+0x198>
 8000524:	24ff      	movs	r4, #255	; 0xff
 8000526:	2300      	movs	r3, #0
 8000528:	e73c      	b.n	80003a4 <__aeabi_fadd+0x50>
 800052a:	2c00      	cmp	r4, #0
 800052c:	d161      	bne.n	80005f2 <__aeabi_fadd+0x29e>
 800052e:	2b00      	cmp	r3, #0
 8000530:	d07e      	beq.n	8000630 <__aeabi_fadd+0x2dc>
 8000532:	2a00      	cmp	r2, #0
 8000534:	d100      	bne.n	8000538 <__aeabi_fadd+0x1e4>
 8000536:	e724      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000538:	189b      	adds	r3, r3, r2
 800053a:	015a      	lsls	r2, r3, #5
 800053c:	d400      	bmi.n	8000540 <__aeabi_fadd+0x1ec>
 800053e:	e760      	b.n	8000402 <__aeabi_fadd+0xae>
 8000540:	4a3e      	ldr	r2, [pc, #248]	; (800063c <__aeabi_fadd+0x2e8>)
 8000542:	000c      	movs	r4, r1
 8000544:	4013      	ands	r3, r2
 8000546:	e71c      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000548:	2c00      	cmp	r4, #0
 800054a:	d11e      	bne.n	800058a <__aeabi_fadd+0x236>
 800054c:	2b00      	cmp	r3, #0
 800054e:	d12f      	bne.n	80005b0 <__aeabi_fadd+0x25c>
 8000550:	2a00      	cmp	r2, #0
 8000552:	d066      	beq.n	8000622 <__aeabi_fadd+0x2ce>
 8000554:	0013      	movs	r3, r2
 8000556:	000d      	movs	r5, r1
 8000558:	e713      	b.n	8000382 <__aeabi_fadd+0x2e>
 800055a:	2201      	movs	r2, #1
 800055c:	e777      	b.n	800044e <__aeabi_fadd+0xfa>
 800055e:	2c00      	cmp	r4, #0
 8000560:	d11f      	bne.n	80005a2 <__aeabi_fadd+0x24e>
 8000562:	2b00      	cmp	r3, #0
 8000564:	d05a      	beq.n	800061c <__aeabi_fadd+0x2c8>
 8000566:	43c9      	mvns	r1, r1
 8000568:	2900      	cmp	r1, #0
 800056a:	d00b      	beq.n	8000584 <__aeabi_fadd+0x230>
 800056c:	2eff      	cmp	r6, #255	; 0xff
 800056e:	d050      	beq.n	8000612 <__aeabi_fadd+0x2be>
 8000570:	291b      	cmp	r1, #27
 8000572:	dc5f      	bgt.n	8000634 <__aeabi_fadd+0x2e0>
 8000574:	001f      	movs	r7, r3
 8000576:	2420      	movs	r4, #32
 8000578:	40cf      	lsrs	r7, r1
 800057a:	1a61      	subs	r1, r4, r1
 800057c:	408b      	lsls	r3, r1
 800057e:	1e59      	subs	r1, r3, #1
 8000580:	418b      	sbcs	r3, r1
 8000582:	433b      	orrs	r3, r7
 8000584:	189b      	adds	r3, r3, r2
 8000586:	0034      	movs	r4, r6
 8000588:	e762      	b.n	8000450 <__aeabi_fadd+0xfc>
 800058a:	2b00      	cmp	r3, #0
 800058c:	d11c      	bne.n	80005c8 <__aeabi_fadd+0x274>
 800058e:	2a00      	cmp	r2, #0
 8000590:	d04a      	beq.n	8000628 <__aeabi_fadd+0x2d4>
 8000592:	0013      	movs	r3, r2
 8000594:	000d      	movs	r5, r1
 8000596:	24ff      	movs	r4, #255	; 0xff
 8000598:	e6f3      	b.n	8000382 <__aeabi_fadd+0x2e>
 800059a:	0013      	movs	r3, r2
 800059c:	0034      	movs	r4, r6
 800059e:	000d      	movs	r5, r1
 80005a0:	e6ef      	b.n	8000382 <__aeabi_fadd+0x2e>
 80005a2:	2eff      	cmp	r6, #255	; 0xff
 80005a4:	d035      	beq.n	8000612 <__aeabi_fadd+0x2be>
 80005a6:	2480      	movs	r4, #128	; 0x80
 80005a8:	04e4      	lsls	r4, r4, #19
 80005aa:	4249      	negs	r1, r1
 80005ac:	4323      	orrs	r3, r4
 80005ae:	e7df      	b.n	8000570 <__aeabi_fadd+0x21c>
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0x262>
 80005b4:	e6e5      	b.n	8000382 <__aeabi_fadd+0x2e>
 80005b6:	2780      	movs	r7, #128	; 0x80
 80005b8:	1a98      	subs	r0, r3, r2
 80005ba:	04ff      	lsls	r7, r7, #19
 80005bc:	4007      	ands	r7, r0
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0x26e>
 80005c0:	e752      	b.n	8000468 <__aeabi_fadd+0x114>
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	000d      	movs	r5, r1
 80005c6:	e6dc      	b.n	8000382 <__aeabi_fadd+0x2e>
 80005c8:	24ff      	movs	r4, #255	; 0xff
 80005ca:	2a00      	cmp	r2, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fadd+0x27c>
 80005ce:	e6d8      	b.n	8000382 <__aeabi_fadd+0x2e>
 80005d0:	2080      	movs	r0, #128	; 0x80
 80005d2:	08db      	lsrs	r3, r3, #3
 80005d4:	03c0      	lsls	r0, r0, #15
 80005d6:	4203      	tst	r3, r0
 80005d8:	d004      	beq.n	80005e4 <__aeabi_fadd+0x290>
 80005da:	08d2      	lsrs	r2, r2, #3
 80005dc:	4202      	tst	r2, r0
 80005de:	d101      	bne.n	80005e4 <__aeabi_fadd+0x290>
 80005e0:	0013      	movs	r3, r2
 80005e2:	000d      	movs	r5, r1
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	24ff      	movs	r4, #255	; 0xff
 80005e8:	e6cb      	b.n	8000382 <__aeabi_fadd+0x2e>
 80005ea:	0013      	movs	r3, r2
 80005ec:	24ff      	movs	r4, #255	; 0xff
 80005ee:	000d      	movs	r5, r1
 80005f0:	e6c7      	b.n	8000382 <__aeabi_fadd+0x2e>
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00d      	beq.n	8000612 <__aeabi_fadd+0x2be>
 80005f6:	24ff      	movs	r4, #255	; 0xff
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	d100      	bne.n	80005fe <__aeabi_fadd+0x2aa>
 80005fc:	e6c1      	b.n	8000382 <__aeabi_fadd+0x2e>
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	08db      	lsrs	r3, r3, #3
 8000602:	03c9      	lsls	r1, r1, #15
 8000604:	420b      	tst	r3, r1
 8000606:	d0ed      	beq.n	80005e4 <__aeabi_fadd+0x290>
 8000608:	08d2      	lsrs	r2, r2, #3
 800060a:	420a      	tst	r2, r1
 800060c:	d1ea      	bne.n	80005e4 <__aeabi_fadd+0x290>
 800060e:	0013      	movs	r3, r2
 8000610:	e7e8      	b.n	80005e4 <__aeabi_fadd+0x290>
 8000612:	0013      	movs	r3, r2
 8000614:	24ff      	movs	r4, #255	; 0xff
 8000616:	e6b4      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000618:	2301      	movs	r3, #1
 800061a:	e772      	b.n	8000502 <__aeabi_fadd+0x1ae>
 800061c:	0013      	movs	r3, r2
 800061e:	0034      	movs	r4, r6
 8000620:	e6af      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000622:	2700      	movs	r7, #0
 8000624:	2000      	movs	r0, #0
 8000626:	e722      	b.n	800046e <__aeabi_fadd+0x11a>
 8000628:	2780      	movs	r7, #128	; 0x80
 800062a:	2000      	movs	r0, #0
 800062c:	03ff      	lsls	r7, r7, #15
 800062e:	e6f1      	b.n	8000414 <__aeabi_fadd+0xc0>
 8000630:	0013      	movs	r3, r2
 8000632:	e6a6      	b.n	8000382 <__aeabi_fadd+0x2e>
 8000634:	2301      	movs	r3, #1
 8000636:	e7a5      	b.n	8000584 <__aeabi_fadd+0x230>
 8000638:	7dffffff 	.word	0x7dffffff
 800063c:	fbffffff 	.word	0xfbffffff

08000640 <__aeabi_f2iz>:
 8000640:	0243      	lsls	r3, r0, #9
 8000642:	0a59      	lsrs	r1, r3, #9
 8000644:	0043      	lsls	r3, r0, #1
 8000646:	0fc2      	lsrs	r2, r0, #31
 8000648:	0e1b      	lsrs	r3, r3, #24
 800064a:	2000      	movs	r0, #0
 800064c:	2b7e      	cmp	r3, #126	; 0x7e
 800064e:	dd0e      	ble.n	800066e <__aeabi_f2iz+0x2e>
 8000650:	2b9d      	cmp	r3, #157	; 0x9d
 8000652:	dc0d      	bgt.n	8000670 <__aeabi_f2iz+0x30>
 8000654:	2080      	movs	r0, #128	; 0x80
 8000656:	0400      	lsls	r0, r0, #16
 8000658:	4301      	orrs	r1, r0
 800065a:	2b95      	cmp	r3, #149	; 0x95
 800065c:	dc0b      	bgt.n	8000676 <__aeabi_f2iz+0x36>
 800065e:	2096      	movs	r0, #150	; 0x96
 8000660:	1ac3      	subs	r3, r0, r3
 8000662:	40d9      	lsrs	r1, r3
 8000664:	000b      	movs	r3, r1
 8000666:	4258      	negs	r0, r3
 8000668:	2a00      	cmp	r2, #0
 800066a:	d100      	bne.n	800066e <__aeabi_f2iz+0x2e>
 800066c:	0018      	movs	r0, r3
 800066e:	4770      	bx	lr
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <__aeabi_f2iz+0x40>)
 8000672:	18d0      	adds	r0, r2, r3
 8000674:	e7fb      	b.n	800066e <__aeabi_f2iz+0x2e>
 8000676:	3b96      	subs	r3, #150	; 0x96
 8000678:	4099      	lsls	r1, r3
 800067a:	000b      	movs	r3, r1
 800067c:	e7f3      	b.n	8000666 <__aeabi_f2iz+0x26>
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	7fffffff 	.word	0x7fffffff

08000684 <__aeabi_i2f>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	2800      	cmp	r0, #0
 8000688:	d030      	beq.n	80006ec <__aeabi_i2f+0x68>
 800068a:	17c3      	asrs	r3, r0, #31
 800068c:	18c5      	adds	r5, r0, r3
 800068e:	405d      	eors	r5, r3
 8000690:	0fc4      	lsrs	r4, r0, #31
 8000692:	0028      	movs	r0, r5
 8000694:	f000 f83e 	bl	8000714 <__clzsi2>
 8000698:	239e      	movs	r3, #158	; 0x9e
 800069a:	1a1b      	subs	r3, r3, r0
 800069c:	2b96      	cmp	r3, #150	; 0x96
 800069e:	dc0d      	bgt.n	80006bc <__aeabi_i2f+0x38>
 80006a0:	2296      	movs	r2, #150	; 0x96
 80006a2:	1ad2      	subs	r2, r2, r3
 80006a4:	4095      	lsls	r5, r2
 80006a6:	026a      	lsls	r2, r5, #9
 80006a8:	0a52      	lsrs	r2, r2, #9
 80006aa:	b2d8      	uxtb	r0, r3
 80006ac:	0252      	lsls	r2, r2, #9
 80006ae:	05c0      	lsls	r0, r0, #23
 80006b0:	0a52      	lsrs	r2, r2, #9
 80006b2:	07e4      	lsls	r4, r4, #31
 80006b4:	4302      	orrs	r2, r0
 80006b6:	4322      	orrs	r2, r4
 80006b8:	0010      	movs	r0, r2
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	2b99      	cmp	r3, #153	; 0x99
 80006be:	dc19      	bgt.n	80006f4 <__aeabi_i2f+0x70>
 80006c0:	2299      	movs	r2, #153	; 0x99
 80006c2:	1ad2      	subs	r2, r2, r3
 80006c4:	4095      	lsls	r5, r2
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <__aeabi_i2f+0x8c>)
 80006c8:	402a      	ands	r2, r5
 80006ca:	0769      	lsls	r1, r5, #29
 80006cc:	d004      	beq.n	80006d8 <__aeabi_i2f+0x54>
 80006ce:	210f      	movs	r1, #15
 80006d0:	400d      	ands	r5, r1
 80006d2:	2d04      	cmp	r5, #4
 80006d4:	d000      	beq.n	80006d8 <__aeabi_i2f+0x54>
 80006d6:	3204      	adds	r2, #4
 80006d8:	0151      	lsls	r1, r2, #5
 80006da:	d503      	bpl.n	80006e4 <__aeabi_i2f+0x60>
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <__aeabi_i2f+0x8c>)
 80006de:	401a      	ands	r2, r3
 80006e0:	239f      	movs	r3, #159	; 0x9f
 80006e2:	1a1b      	subs	r3, r3, r0
 80006e4:	0192      	lsls	r2, r2, #6
 80006e6:	0a52      	lsrs	r2, r2, #9
 80006e8:	b2d8      	uxtb	r0, r3
 80006ea:	e7df      	b.n	80006ac <__aeabi_i2f+0x28>
 80006ec:	2400      	movs	r4, #0
 80006ee:	2000      	movs	r0, #0
 80006f0:	2200      	movs	r2, #0
 80006f2:	e7db      	b.n	80006ac <__aeabi_i2f+0x28>
 80006f4:	2205      	movs	r2, #5
 80006f6:	002e      	movs	r6, r5
 80006f8:	1a12      	subs	r2, r2, r0
 80006fa:	21b9      	movs	r1, #185	; 0xb9
 80006fc:	40d6      	lsrs	r6, r2
 80006fe:	002a      	movs	r2, r5
 8000700:	1ac9      	subs	r1, r1, r3
 8000702:	408a      	lsls	r2, r1
 8000704:	1e55      	subs	r5, r2, #1
 8000706:	41aa      	sbcs	r2, r5
 8000708:	0035      	movs	r5, r6
 800070a:	4315      	orrs	r5, r2
 800070c:	e7db      	b.n	80006c6 <__aeabi_i2f+0x42>
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	fbffffff 	.word	0xfbffffff

08000714 <__clzsi2>:
 8000714:	211c      	movs	r1, #28
 8000716:	2301      	movs	r3, #1
 8000718:	041b      	lsls	r3, r3, #16
 800071a:	4298      	cmp	r0, r3
 800071c:	d301      	bcc.n	8000722 <__clzsi2+0xe>
 800071e:	0c00      	lsrs	r0, r0, #16
 8000720:	3910      	subs	r1, #16
 8000722:	0a1b      	lsrs	r3, r3, #8
 8000724:	4298      	cmp	r0, r3
 8000726:	d301      	bcc.n	800072c <__clzsi2+0x18>
 8000728:	0a00      	lsrs	r0, r0, #8
 800072a:	3908      	subs	r1, #8
 800072c:	091b      	lsrs	r3, r3, #4
 800072e:	4298      	cmp	r0, r3
 8000730:	d301      	bcc.n	8000736 <__clzsi2+0x22>
 8000732:	0900      	lsrs	r0, r0, #4
 8000734:	3904      	subs	r1, #4
 8000736:	a202      	add	r2, pc, #8	; (adr r2, 8000740 <__clzsi2+0x2c>)
 8000738:	5c10      	ldrb	r0, [r2, r0]
 800073a:	1840      	adds	r0, r0, r1
 800073c:	4770      	bx	lr
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	02020304 	.word	0x02020304
 8000744:	01010101 	.word	0x01010101
 8000748:	00000000 	.word	0x00000000
 800074c:	00000000 	.word	0x00000000

08000750 <__libc_init_array>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	4e0d      	ldr	r6, [pc, #52]	; (8000788 <__libc_init_array+0x38>)
 8000754:	4d0d      	ldr	r5, [pc, #52]	; (800078c <__libc_init_array+0x3c>)
 8000756:	2400      	movs	r4, #0
 8000758:	1bad      	subs	r5, r5, r6
 800075a:	10ad      	asrs	r5, r5, #2
 800075c:	d005      	beq.n	800076a <__libc_init_array+0x1a>
 800075e:	00a3      	lsls	r3, r4, #2
 8000760:	58f3      	ldr	r3, [r6, r3]
 8000762:	3401      	adds	r4, #1
 8000764:	4798      	blx	r3
 8000766:	42a5      	cmp	r5, r4
 8000768:	d1f9      	bne.n	800075e <__libc_init_array+0xe>
 800076a:	f001 fd3b 	bl	80021e4 <_init>
 800076e:	4e08      	ldr	r6, [pc, #32]	; (8000790 <__libc_init_array+0x40>)
 8000770:	4d08      	ldr	r5, [pc, #32]	; (8000794 <__libc_init_array+0x44>)
 8000772:	2400      	movs	r4, #0
 8000774:	1bad      	subs	r5, r5, r6
 8000776:	10ad      	asrs	r5, r5, #2
 8000778:	d005      	beq.n	8000786 <__libc_init_array+0x36>
 800077a:	00a3      	lsls	r3, r4, #2
 800077c:	58f3      	ldr	r3, [r6, r3]
 800077e:	3401      	adds	r4, #1
 8000780:	4798      	blx	r3
 8000782:	42a5      	cmp	r5, r4
 8000784:	d1f9      	bne.n	800077a <__libc_init_array+0x2a>
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	080021fc 	.word	0x080021fc
 800078c:	080021fc 	.word	0x080021fc
 8000790:	080021fc 	.word	0x080021fc
 8000794:	08002200 	.word	0x08002200

08000798 <get_key>:
#include <stdlib.h>

#include "simpleserial.h"

uint8_t get_key(uint8_t* k)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	// Load key here
	return 0x00;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)

080007ac <delay_2_ms>:

static void delay_2_ms(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	e002      	b.n	80007be <delay_2_ms+0x12>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3301      	adds	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <delay_2_ms+0x24>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d9f8      	bls.n	80007b8 <delay_2_ms+0xc>
    ;
  }
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	00000ffe 	.word	0x00000ffe

080007d4 <get_pt>:
 0.605223,0.587725,0.404945,0.500636,0.578877,0.638513,0.574408,0.094848,0.209278,0.034183,
 0.453673,0.769301,0.283175,0.456955,0.485850,0.305770,0.621719,0.684782};
float imagePixel[28] = {0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0};

uint8_t get_pt(uint8_t* pt)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	/**********************************
	* Start user-specific code here. */
    
    float result = 0.512558f;
 80007dc:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <get_pt+0xd4>)
 80007de:	613b      	str	r3, [r7, #16]
    
	trigger_high();
 80007e0:	f000 fb98 	bl	8000f14 <trigger_high>
    k = 5.0f * k;
    */
    
      
    // Section for second attempt attacking a binary convolutional neural network
    float pop_count = 0.0f;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
    unsigned char val1 = 0xFF;
 80007e8:	230f      	movs	r3, #15
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	701a      	strb	r2, [r3, #0]
    unsigned char val2 = 0xAA;
 80007f0:	230e      	movs	r3, #14
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	22aa      	movs	r2, #170	; 0xaa
 80007f6:	701a      	strb	r2, [r3, #0]
    unsigned char res = ~(val1 ^ val2);
 80007f8:	230f      	movs	r3, #15
 80007fa:	18fa      	adds	r2, r7, r3
 80007fc:	230e      	movs	r3, #14
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4053      	eors	r3, r2
 8000806:	b2da      	uxtb	r2, r3
 8000808:	231b      	movs	r3, #27
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	43d2      	mvns	r2, r2
 800080e:	701a      	strb	r2, [r3, #0]
        pop_count += (res & 1);
        res >>= 1;    
    }
    */
    
    pop_count = 0.0f;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
    val1 = 0x00;
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
    val2 = 0xAA;
 800081c:	230e      	movs	r3, #14
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	22aa      	movs	r2, #170	; 0xaa
 8000822:	701a      	strb	r2, [r3, #0]
    res = ~(val1 ^ val2);
 8000824:	230f      	movs	r3, #15
 8000826:	18fa      	adds	r2, r7, r3
 8000828:	230e      	movs	r3, #14
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4053      	eors	r3, r2
 8000832:	b2da      	uxtb	r2, r3
 8000834:	231b      	movs	r3, #27
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	43d2      	mvns	r2, r2
 800083a:	701a      	strb	r2, [r3, #0]
    
    for(int i = 0 ; i < 8; i++){
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e018      	b.n	8000874 <get_pt+0xa0>
        pop_count += (res & 1);
 8000842:	231b      	movs	r3, #27
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2201      	movs	r2, #1
 800084a:	4013      	ands	r3, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff ff19 	bl	8000684 <__aeabi_i2f>
 8000852:	1c03      	adds	r3, r0, #0
 8000854:	1c19      	adds	r1, r3, #0
 8000856:	69f8      	ldr	r0, [r7, #28]
 8000858:	f7ff fd7c 	bl	8000354 <__aeabi_fadd>
 800085c:	1c03      	adds	r3, r0, #0
 800085e:	61fb      	str	r3, [r7, #28]
        res >>= 1;    
 8000860:	231b      	movs	r3, #27
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	221b      	movs	r2, #27
 8000866:	18ba      	adds	r2, r7, r2
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	0852      	lsrs	r2, r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
    for(int i = 0 ; i < 8; i++){
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	2b07      	cmp	r3, #7
 8000878:	dde3      	ble.n	8000842 <get_pt+0x6e>
    }
    
    
    delay_2_ms();
 800087a:	f7ff ff97 	bl	80007ac <delay_2_ms>
    trigger_low();
 800087e:	f000 fb55 	bl	8000f2c <trigger_low>
    pt[0] = (int)result;
 8000882:	6938      	ldr	r0, [r7, #16]
 8000884:	f7ff fedc 	bl	8000640 <__aeabi_f2iz>
 8000888:	0003      	movs	r3, r0
 800088a:	b2da      	uxtb	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	701a      	strb	r2, [r3, #0]
	/* End user-specific code here. *
	********************************/
	simpleserial_put('r', 16, pt);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	001a      	movs	r2, r3
 8000894:	2110      	movs	r1, #16
 8000896:	2072      	movs	r0, #114	; 0x72
 8000898:	f000 fa0a 	bl	8000cb0 <simpleserial_put>
	return 0x00;
 800089c:	2300      	movs	r3, #0
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b008      	add	sp, #32
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	3f033700 	.word	0x3f033700

080008ac <reset>:

uint8_t reset(uint8_t* x)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	// Reset key here if needed
	return 0x00;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)

080008c0 <main>:

int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
    platform_init();
 80008c4:	f000 fa2e 	bl	8000d24 <platform_init>
	init_uart();	
 80008c8:	f000 fa8a 	bl	8000de0 <init_uart>
	trigger_setup();
 80008cc:	f000 faf0 	bl	8000eb0 <trigger_setup>
	putch('l');
	putch('o');
	putch('\n');
	*/
		
	simpleserial_init();		
 80008d0:	f000 f8e6 	bl	8000aa0 <simpleserial_init>
	simpleserial_addcmd('k', 16, get_key);
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <main+0x40>)
 80008d6:	001a      	movs	r2, r3
 80008d8:	2110      	movs	r1, #16
 80008da:	206b      	movs	r0, #107	; 0x6b
 80008dc:	f000 f8ee 	bl	8000abc <simpleserial_addcmd>
	simpleserial_addcmd('p', 16, get_pt);
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <main+0x44>)
 80008e2:	001a      	movs	r2, r3
 80008e4:	2110      	movs	r1, #16
 80008e6:	2070      	movs	r0, #112	; 0x70
 80008e8:	f000 f8e8 	bl	8000abc <simpleserial_addcmd>
	simpleserial_addcmd('x', 0, reset);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <main+0x48>)
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	2078      	movs	r0, #120	; 0x78
 80008f4:	f000 f8e2 	bl	8000abc <simpleserial_addcmd>
	while(1)
		simpleserial_get();
 80008f8:	f000 f924 	bl	8000b44 <simpleserial_get>
 80008fc:	e7fc      	b.n	80008f8 <main+0x38>
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	08000799 	.word	0x08000799
 8000904:	080007d5 	.word	0x080007d5
 8000908:	080008ad 	.word	0x080008ad

0800090c <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	e0ab      	b.n	8000a76 <hex_decode+0x16a>
	{
		char n_hi = ascii_buf[2*i];
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	001a      	movs	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	189a      	adds	r2, r3, r2
 8000928:	2313      	movs	r3, #19
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	7812      	ldrb	r2, [r2, #0]
 800092e:	701a      	strb	r2, [r3, #0]
		char n_lo = ascii_buf[2*i+1];
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	3301      	adds	r3, #1
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	18d2      	adds	r2, r2, r3
 800093a:	2312      	movs	r3, #18
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	7812      	ldrb	r2, [r2, #0]
 8000940:	701a      	strb	r2, [r3, #0]

		if(n_lo >= '0' && n_lo <= '9')
 8000942:	2312      	movs	r3, #18
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b2f      	cmp	r3, #47	; 0x2f
 800094a:	d90e      	bls.n	800096a <hex_decode+0x5e>
 800094c:	2312      	movs	r3, #18
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b39      	cmp	r3, #57	; 0x39
 8000954:	d809      	bhi.n	800096a <hex_decode+0x5e>
			data_buf[i] = n_lo - '0';
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	18d3      	adds	r3, r2, r3
 800095c:	2212      	movs	r2, #18
 800095e:	18ba      	adds	r2, r7, r2
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	3a30      	subs	r2, #48	; 0x30
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e029      	b.n	80009be <hex_decode+0xb2>
		else if(n_lo >= 'A' && n_lo <= 'F')
 800096a:	2312      	movs	r3, #18
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b40      	cmp	r3, #64	; 0x40
 8000972:	d90e      	bls.n	8000992 <hex_decode+0x86>
 8000974:	2312      	movs	r3, #18
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b46      	cmp	r3, #70	; 0x46
 800097c:	d809      	bhi.n	8000992 <hex_decode+0x86>
			data_buf[i] = n_lo - 'A' + 10;
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	18d3      	adds	r3, r2, r3
 8000984:	2212      	movs	r2, #18
 8000986:	18ba      	adds	r2, r7, r2
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	3a37      	subs	r2, #55	; 0x37
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e015      	b.n	80009be <hex_decode+0xb2>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8000992:	2312      	movs	r3, #18
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b60      	cmp	r3, #96	; 0x60
 800099a:	d90e      	bls.n	80009ba <hex_decode+0xae>
 800099c:	2312      	movs	r3, #18
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b66      	cmp	r3, #102	; 0x66
 80009a4:	d809      	bhi.n	80009ba <hex_decode+0xae>
			data_buf[i] = n_lo - 'a' + 10;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	18d3      	adds	r3, r2, r3
 80009ac:	2212      	movs	r2, #18
 80009ae:	18ba      	adds	r2, r7, r2
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	3a57      	subs	r2, #87	; 0x57
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	e001      	b.n	80009be <hex_decode+0xb2>
		else
			return 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e061      	b.n	8000a82 <hex_decode+0x176>

		if(n_hi >= '0' && n_hi <= '9')
 80009be:	2313      	movs	r3, #19
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b2f      	cmp	r3, #47	; 0x2f
 80009c6:	d917      	bls.n	80009f8 <hex_decode+0xec>
 80009c8:	2313      	movs	r3, #19
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b39      	cmp	r3, #57	; 0x39
 80009d0:	d812      	bhi.n	80009f8 <hex_decode+0xec>
			data_buf[i] |= (n_hi - '0') << 4;
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	18d3      	adds	r3, r2, r3
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	188a      	adds	r2, r1, r2
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	b251      	sxtb	r1, r2
 80009e2:	2213      	movs	r2, #19
 80009e4:	18ba      	adds	r2, r7, r2
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	3a30      	subs	r2, #48	; 0x30
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b252      	sxtb	r2, r2
 80009ee:	430a      	orrs	r2, r1
 80009f0:	b252      	sxtb	r2, r2
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	e03b      	b.n	8000a70 <hex_decode+0x164>
		else if(n_hi >= 'A' && n_hi <= 'F')
 80009f8:	2313      	movs	r3, #19
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b40      	cmp	r3, #64	; 0x40
 8000a00:	d917      	bls.n	8000a32 <hex_decode+0x126>
 8000a02:	2313      	movs	r3, #19
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b46      	cmp	r3, #70	; 0x46
 8000a0a:	d812      	bhi.n	8000a32 <hex_decode+0x126>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	188a      	adds	r2, r1, r2
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	b251      	sxtb	r1, r2
 8000a1c:	2213      	movs	r2, #19
 8000a1e:	18ba      	adds	r2, r7, r2
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	3a37      	subs	r2, #55	; 0x37
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b252      	sxtb	r2, r2
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	b252      	sxtb	r2, r2
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e01e      	b.n	8000a70 <hex_decode+0x164>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8000a32:	2313      	movs	r3, #19
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b60      	cmp	r3, #96	; 0x60
 8000a3a:	d917      	bls.n	8000a6c <hex_decode+0x160>
 8000a3c:	2313      	movs	r3, #19
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b66      	cmp	r3, #102	; 0x66
 8000a44:	d812      	bhi.n	8000a6c <hex_decode+0x160>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	18d3      	adds	r3, r2, r3
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	188a      	adds	r2, r1, r2
 8000a52:	7812      	ldrb	r2, [r2, #0]
 8000a54:	b251      	sxtb	r1, r2
 8000a56:	2213      	movs	r2, #19
 8000a58:	18ba      	adds	r2, r7, r2
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	3a57      	subs	r2, #87	; 0x57
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b252      	sxtb	r2, r2
 8000a62:	430a      	orrs	r2, r1
 8000a64:	b252      	sxtb	r2, r2
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	e001      	b.n	8000a70 <hex_decode+0x164>
		else
			return 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e008      	b.n	8000a82 <hex_decode+0x176>
	for(int i = 0; i < len; i++)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3301      	adds	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	da00      	bge.n	8000a80 <hex_decode+0x174>
 8000a7e:	e74e      	b.n	800091e <hex_decode+0x12>
	}

	return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b006      	add	sp, #24
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)

08000a8c <check_version>:

// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	return 0x00;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	0018      	movs	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)

08000aa0 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <simpleserial_init+0x18>)
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2076      	movs	r0, #118	; 0x76
 8000aac:	f000 f806 	bl	8000abc <simpleserial_addcmd>
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	08000a8d 	.word	0x08000a8d

08000abc <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	1c02      	adds	r2, r0, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	if(num_commands >= MAX_SS_CMDS)
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <simpleserial_addcmd+0x80>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b09      	cmp	r3, #9
 8000ad4:	dd01      	ble.n	8000ada <simpleserial_addcmd+0x1e>
		return 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e02b      	b.n	8000b32 <simpleserial_addcmd+0x76>

	if(len >= MAX_SS_LEN)
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ade:	d901      	bls.n	8000ae4 <simpleserial_addcmd+0x28>
		return 1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e026      	b.n	8000b32 <simpleserial_addcmd+0x76>

	commands[num_commands].c   = c;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <simpleserial_addcmd+0x80>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4915      	ldr	r1, [pc, #84]	; (8000b40 <simpleserial_addcmd+0x84>)
 8000aea:	0013      	movs	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	220f      	movs	r2, #15
 8000af4:	18ba      	adds	r2, r7, r2
 8000af6:	7812      	ldrb	r2, [r2, #0]
 8000af8:	545a      	strb	r2, [r3, r1]
	commands[num_commands].len = len;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <simpleserial_addcmd+0x80>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4910      	ldr	r1, [pc, #64]	; (8000b40 <simpleserial_addcmd+0x84>)
 8000b00:	0013      	movs	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	189b      	adds	r3, r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	18cb      	adds	r3, r1, r3
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <simpleserial_addcmd+0x80>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	490a      	ldr	r1, [pc, #40]	; (8000b40 <simpleserial_addcmd+0x84>)
 8000b16:	0013      	movs	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	18cb      	adds	r3, r1, r3
 8000b20:	3308      	adds	r3, #8
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
	num_commands++;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <simpleserial_addcmd+0x80>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <simpleserial_addcmd+0x80>)
 8000b2e:	601a      	str	r2, [r3, #0]

	return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	200000a8 	.word	0x200000a8
 8000b40:	20000030 	.word	0x20000030

08000b44 <simpleserial_get>:

void simpleserial_get(void)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b0b5      	sub	sp, #212	; 0xd4
 8000b48:	af00      	add	r7, sp, #0
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 8000b4a:	23c7      	movs	r3, #199	; 0xc7
 8000b4c:	18fc      	adds	r4, r7, r3
 8000b4e:	f000 f9f9 	bl	8000f44 <getch>
 8000b52:	0003      	movs	r3, r0
 8000b54:	7023      	strb	r3, [r4, #0]

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	22cc      	movs	r2, #204	; 0xcc
 8000b5a:	18ba      	adds	r2, r7, r2
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e014      	b.n	8000b8a <simpleserial_get+0x46>
	{
		if(commands[cmd].c == c)
 8000b60:	4951      	ldr	r1, [pc, #324]	; (8000ca8 <simpleserial_get+0x164>)
 8000b62:	23cc      	movs	r3, #204	; 0xcc
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	0013      	movs	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	189b      	adds	r3, r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	5c5b      	ldrb	r3, [r3, r1]
 8000b72:	22c7      	movs	r2, #199	; 0xc7
 8000b74:	18ba      	adds	r2, r7, r2
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d00e      	beq.n	8000b9a <simpleserial_get+0x56>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000b7c:	23cc      	movs	r3, #204	; 0xcc
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	22cc      	movs	r2, #204	; 0xcc
 8000b86:	18ba      	adds	r2, r7, r2
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	4b48      	ldr	r3, [pc, #288]	; (8000cac <simpleserial_get+0x168>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	22cc      	movs	r2, #204	; 0xcc
 8000b90:	18ba      	adds	r2, r7, r2
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbe3      	blt.n	8000b60 <simpleserial_get+0x1c>
 8000b98:	e000      	b.n	8000b9c <simpleserial_get+0x58>
			break;
 8000b9a:	46c0      	nop			; (mov r8, r8)
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 8000b9c:	4b43      	ldr	r3, [pc, #268]	; (8000cac <simpleserial_get+0x168>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	22cc      	movs	r2, #204	; 0xcc
 8000ba2:	18ba      	adds	r2, r7, r2
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d100      	bne.n	8000bac <simpleserial_get+0x68>
 8000baa:	e073      	b.n	8000c94 <simpleserial_get+0x150>
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	22c8      	movs	r2, #200	; 0xc8
 8000bb0:	18ba      	adds	r2, r7, r2
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e020      	b.n	8000bf8 <simpleserial_get+0xb4>
	{
		c = getch();
 8000bb6:	23c7      	movs	r3, #199	; 0xc7
 8000bb8:	18fc      	adds	r4, r7, r3
 8000bba:	f000 f9c3 	bl	8000f44 <getch>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	7023      	strb	r3, [r4, #0]

		// Check for early \n
		if(c == '\n' || c == '\r')
 8000bc2:	23c7      	movs	r3, #199	; 0xc7
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d065      	beq.n	8000c98 <simpleserial_get+0x154>
 8000bcc:	23c7      	movs	r3, #199	; 0xc7
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b0d      	cmp	r3, #13
 8000bd4:	d060      	beq.n	8000c98 <simpleserial_get+0x154>
			return;

		ascii_buf[i] = c;
 8000bd6:	2344      	movs	r3, #68	; 0x44
 8000bd8:	18fa      	adds	r2, r7, r3
 8000bda:	23c8      	movs	r3, #200	; 0xc8
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	22c7      	movs	r2, #199	; 0xc7
 8000be4:	18ba      	adds	r2, r7, r2
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000bea:	23c8      	movs	r3, #200	; 0xc8
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	22c8      	movs	r2, #200	; 0xc8
 8000bf4:	18ba      	adds	r2, r7, r2
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	492b      	ldr	r1, [pc, #172]	; (8000ca8 <simpleserial_get+0x164>)
 8000bfa:	23cc      	movs	r3, #204	; 0xcc
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	0013      	movs	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	189b      	adds	r3, r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	005a      	lsls	r2, r3, #1
 8000c10:	23c8      	movs	r3, #200	; 0xc8
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d8cd      	bhi.n	8000bb6 <simpleserial_get+0x72>
	}

	// Assert that last character is \n or \r
	c = getch();
 8000c1a:	23c7      	movs	r3, #199	; 0xc7
 8000c1c:	18fc      	adds	r4, r7, r3
 8000c1e:	f000 f991 	bl	8000f44 <getch>
 8000c22:	0003      	movs	r3, r0
 8000c24:	7023      	strb	r3, [r4, #0]
	if(c != '\n' && c != '\r')
 8000c26:	23c7      	movs	r3, #199	; 0xc7
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b0a      	cmp	r3, #10
 8000c2e:	d004      	beq.n	8000c3a <simpleserial_get+0xf6>
 8000c30:	23c7      	movs	r3, #199	; 0xc7
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b0d      	cmp	r3, #13
 8000c38:	d130      	bne.n	8000c9c <simpleserial_get+0x158>
		return;

	// ASCII buffer is full: convert to bytes 
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8000c3a:	491b      	ldr	r1, [pc, #108]	; (8000ca8 <simpleserial_get+0x164>)
 8000c3c:	23cc      	movs	r3, #204	; 0xcc
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	0013      	movs	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	189b      	adds	r3, r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	18cb      	adds	r3, r1, r3
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	0018      	movs	r0, r3
 8000c52:	1d3a      	adds	r2, r7, #4
 8000c54:	2344      	movs	r3, #68	; 0x44
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	0019      	movs	r1, r3
 8000c5a:	f7ff fe57 	bl	800090c <hex_decode>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d11e      	bne.n	8000ca0 <simpleserial_get+0x15c>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf);
 8000c62:	4911      	ldr	r1, [pc, #68]	; (8000ca8 <simpleserial_get+0x164>)
 8000c64:	23cc      	movs	r3, #204	; 0xcc
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	189b      	adds	r3, r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	18cb      	adds	r3, r1, r3
 8000c74:	3308      	adds	r3, #8
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	1d3a      	adds	r2, r7, #4
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	4798      	blx	r3
 8000c7e:	0003      	movs	r3, r0
 8000c80:	001a      	movs	r2, r3
 8000c82:	003b      	movs	r3, r7
 8000c84:	701a      	strb	r2, [r3, #0]
	
	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 8000c86:	003b      	movs	r3, r7
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	207a      	movs	r0, #122	; 0x7a
 8000c8e:	f000 f80f 	bl	8000cb0 <simpleserial_put>
 8000c92:	e006      	b.n	8000ca2 <simpleserial_get+0x15e>
		return;
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	e004      	b.n	8000ca2 <simpleserial_get+0x15e>
			return;
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	e002      	b.n	8000ca2 <simpleserial_get+0x15e>
		return;
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	e000      	b.n	8000ca2 <simpleserial_get+0x15e>
		return;
 8000ca0:	46c0      	nop			; (mov r8, r8)
#endif
}
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b035      	add	sp, #212	; 0xd4
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	20000030 	.word	0x20000030
 8000cac:	200000a8 	.word	0x200000a8

08000cb0 <simpleserial_put>:

void simpleserial_put(char c, int size, uint8_t* output)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	230f      	movs	r3, #15
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	1c02      	adds	r2, r0, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
	// Write first character
	putch(c);
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 f951 	bl	8000f70 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e01a      	b.n	8000d0a <simpleserial_put+0x5a>
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	18d3      	adds	r3, r2, r3
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <simpleserial_put+0x70>)
 8000ce4:	5c9b      	ldrb	r3, [r3, r2]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 f942 	bl	8000f70 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <simpleserial_put+0x70>)
 8000cfc:	5cd3      	ldrb	r3, [r2, r3]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 f936 	bl	8000f70 <putch>
	for(int i = 0; i < size; i++)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3301      	adds	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dbe0      	blt.n	8000cd4 <simpleserial_put+0x24>
	}

	// Write trailing '\n'
	putch('\n');
 8000d12:	200a      	movs	r0, #10
 8000d14:	f000 f92c 	bl	8000f70 <putch>
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b006      	add	sp, #24
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000

08000d24 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b096      	sub	sp, #88	; 0x58
 8000d28:	af00      	add	r7, sp, #0
    /* LEDs */
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
 8000d2a:	2344      	movs	r3, #68	; 0x44
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	2204      	movs	r2, #4
 8000d30:	601a      	str	r2, [r3, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000d32:	2344      	movs	r3, #68	; 0x44
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	2201      	movs	r2, #1
 8000d38:	605a      	str	r2, [r3, #4]
	GpioInit.Pull      = GPIO_NOPULL;
 8000d3a:	2344      	movs	r3, #68	; 0x44
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d42:	2344      	movs	r3, #68	; 0x44
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	2203      	movs	r2, #3
 8000d48:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000d4a:	2344      	movs	r3, #68	; 0x44
 8000d4c:	18fa      	adds	r2, r7, r3
 8000d4e:	2390      	movs	r3, #144	; 0x90
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	0011      	movs	r1, r2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fd0d 	bl	8001774 <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 8000d5a:	2344      	movs	r3, #68	; 0x44
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2210      	movs	r2, #16
 8000d60:	601a      	str	r2, [r3, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000d62:	2344      	movs	r3, #68	; 0x44
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2201      	movs	r2, #1
 8000d68:	605a      	str	r2, [r3, #4]
	GpioInit.Pull      = GPIO_NOPULL;
 8000d6a:	2344      	movs	r3, #68	; 0x44
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d72:	2344      	movs	r3, #68	; 0x44
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	2203      	movs	r2, #3
 8000d78:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000d7a:	2344      	movs	r3, #68	; 0x44
 8000d7c:	18fa      	adds	r2, r7, r3
 8000d7e:	2390      	movs	r3, #144	; 0x90
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 fcf5 	bl	8001774 <HAL_GPIO_Init>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000d8a:	2314      	movs	r3, #20
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	2203      	movs	r2, #3
 8000d90:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000d92:	2314      	movs	r3, #20
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	2205      	movs	r2, #5
 8000d98:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000d9a:	2314      	movs	r3, #20
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000da2:	2314      	movs	r3, #20
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000daa:	2314      	movs	r3, #20
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 f916 	bl	8000fe0 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2207      	movs	r2, #7
 8000db8:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2100      	movs	r1, #0
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 fbf7 	bl	80015c4 <HAL_RCC_ClockConfig>
#endif
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b016      	add	sp, #88	; 0x58
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)

08000de0 <init_uart>:

void init_uart(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <init_uart+0xc4>)
 8000de8:	4a2e      	ldr	r2, [pc, #184]	; (8000ea4 <init_uart+0xc4>)
 8000dea:	6952      	ldr	r2, [r2, #20]
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0289      	lsls	r1, r1, #10
 8000df0:	430a      	orrs	r2, r1
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <init_uart+0xc4>)
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	029b      	lsls	r3, r3, #10
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000e02:	230c      	movs	r3, #12
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	22c0      	movs	r2, #192	; 0xc0
 8000e08:	00d2      	lsls	r2, r2, #3
 8000e0a:	601a      	str	r2, [r3, #0]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2202      	movs	r2, #2
 8000e12:	605a      	str	r2, [r3, #4]
	GpioInit.Pull      = GPIO_PULLUP;
 8000e14:	230c      	movs	r3, #12
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	2201      	movs	r2, #1
 8000e1a:	609a      	str	r2, [r3, #8]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2203      	movs	r2, #3
 8000e22:	60da      	str	r2, [r3, #12]
	GpioInit.Alternate = GPIO_AF1_USART1;
 8000e24:	230c      	movs	r3, #12
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	2201      	movs	r2, #1
 8000e2a:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	18fa      	adds	r2, r7, r3
 8000e30:	2390      	movs	r3, #144	; 0x90
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	0011      	movs	r1, r2
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 fc9c 	bl	8001774 <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <init_uart+0xc4>)
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <init_uart+0xc4>)
 8000e40:	6992      	ldr	r2, [r2, #24]
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	01c9      	lsls	r1, r1, #7
 8000e46:	430a      	orrs	r2, r1
 8000e48:	619a      	str	r2, [r3, #24]
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <init_uart+0xc4>)
 8000e4c:	699a      	ldr	r2, [r3, #24]
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	01db      	lsls	r3, r3, #7
 8000e52:	4013      	ands	r3, r2
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <init_uart+0xc4>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <init_uart+0xc4>)
 8000e5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e5e:	2103      	movs	r1, #3
 8000e60:	438a      	bics	r2, r1
 8000e62:	2101      	movs	r1, #1
 8000e64:	430a      	orrs	r2, r1
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
	UartHandle.Instance        = USART1;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <init_uart+0xc8>)
 8000e6a:	4a10      	ldr	r2, [pc, #64]	; (8000eac <init_uart+0xcc>)
 8000e6c:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 38400;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <init_uart+0xc8>)
 8000e70:	2296      	movs	r2, #150	; 0x96
 8000e72:	0212      	lsls	r2, r2, #8
 8000e74:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <init_uart+0xc8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <init_uart+0xc8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <init_uart+0xc8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <init_uart+0xc8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <init_uart+0xc8>)
 8000e90:	220c      	movs	r2, #12
 8000e92:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&UartHandle);
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <init_uart+0xc8>)
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 ffc0 	bl	8001e1c <HAL_UART_Init>
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b008      	add	sp, #32
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	200000b0 	.word	0x200000b0
 8000eac:	40013800 	.word	0x40013800

08000eb0 <trigger_setup>:

void trigger_setup(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <trigger_setup+0x60>)
 8000eb8:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <trigger_setup+0x60>)
 8000eba:	6952      	ldr	r2, [r2, #20]
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0289      	lsls	r1, r1, #10
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	615a      	str	r2, [r3, #20]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <trigger_setup+0x60>)
 8000ec6:	695a      	ldr	r2, [r3, #20]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	029b      	lsls	r3, r3, #10
 8000ecc:	4013      	ands	r3, r2
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
	
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	601a      	str	r2, [r3, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2201      	movs	r2, #1
 8000edc:	605a      	str	r2, [r3, #4]
	GpioInit.Pull      = GPIO_NOPULL;
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	2390      	movs	r3, #144	; 0x90
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 fc3e 	bl	8001774 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000ef8:	2390      	movs	r3, #144	; 0x90
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	2200      	movs	r2, #0
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 fdab 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b006      	add	sp, #24
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	40021000 	.word	0x40021000

08000f14 <trigger_high>:

void trigger_high(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000f18:	2390      	movs	r3, #144	; 0x90
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	0018      	movs	r0, r3
 8000f22:	f000 fd9b 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <trigger_low>:

void trigger_low(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000f30:	2390      	movs	r3, #144	; 0x90
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	2200      	movs	r2, #0
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f000 fd8f 	bl	8001a5c <HAL_GPIO_WritePin>
}   
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <getch>:

char getch(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <getch+0x24>)
 8000f4e:	1df9      	adds	r1, r7, #7
 8000f50:	4806      	ldr	r0, [pc, #24]	; (8000f6c <getch+0x28>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	f000 ffae 	bl	8001eb4 <HAL_UART_Receive>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d1f7      	bne.n	8000f4c <getch+0x8>
	return d;
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	781b      	ldrb	r3, [r3, #0]
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	00001388 	.word	0x00001388
 8000f6c:	200000b0 	.word	0x200000b0

08000f70 <putch>:

void putch(char c)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	701a      	strb	r2, [r3, #0]
	uint8_t d  = c;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	1dfa      	adds	r2, r7, #7
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <putch+0x2c>)
 8000f88:	220f      	movs	r2, #15
 8000f8a:	18b9      	adds	r1, r7, r2
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <putch+0x30>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f001 f85e 	bl	8002050 <HAL_UART_Transmit>
}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b004      	add	sp, #16
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	00001388 	.word	0x00001388
 8000fa0:	200000b0 	.word	0x200000b0

08000fa4 <HAL_GetTick>:
#include "stm32f0xx_hal_flash.h"

#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	static uint32_t tick;
	return tick++;;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <HAL_GetTick+0x18>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	1c51      	adds	r1, r2, #1
 8000fae:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x18>)
 8000fb0:	6019      	str	r1, [r3, #0]
 8000fb2:	0013      	movs	r3, r2
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	200000ac 	.word	0x200000ac

08000fc0 <HAL_RCC_GetSysClockFreq>:
									 
uint32_t SystemCoreClock = 8000000;


uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	return 7372800U;
 8000fc4:	23e1      	movs	r3, #225	; 0xe1
 8000fc6:	03db      	lsls	r3, r3, #15
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)

08000fd0 <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	return 7372800U;
 8000fd4:	23e1      	movs	r3, #225	; 0xe1
 8000fd6:	03db      	lsls	r3, r3, #15
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d100      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x18>
 8000ff6:	e08a      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ff8:	4bc2      	ldr	r3, [pc, #776]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b04      	cmp	r3, #4
 8001002:	d00b      	beq.n	800101c <HAL_RCC_OscConfig+0x3c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001004:	4bbf      	ldr	r3, [pc, #764]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	220c      	movs	r2, #12
 800100a:	4013      	ands	r3, r2
 800100c:	2b08      	cmp	r3, #8
 800100e:	d113      	bne.n	8001038 <HAL_RCC_OscConfig+0x58>
 8001010:	4bbc      	ldr	r3, [pc, #752]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	025b      	lsls	r3, r3, #9
 8001018:	4013      	ands	r3, r2
 800101a:	d00d      	beq.n	8001038 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101c:	4bb9      	ldr	r3, [pc, #740]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	029b      	lsls	r3, r3, #10
 8001024:	4013      	ands	r3, r2
 8001026:	d100      	bne.n	800102a <HAL_RCC_OscConfig+0x4a>
 8001028:	e070      	b.n	800110c <HAL_RCC_OscConfig+0x12c>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d000      	beq.n	8001034 <HAL_RCC_OscConfig+0x54>
 8001032:	e06b      	b.n	800110c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e2b6      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d107      	bne.n	8001050 <HAL_RCC_OscConfig+0x70>
 8001040:	4bb0      	ldr	r3, [pc, #704]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001042:	4ab0      	ldr	r2, [pc, #704]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	0249      	lsls	r1, r1, #9
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e02f      	b.n	80010b0 <HAL_RCC_OscConfig+0xd0>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10c      	bne.n	8001072 <HAL_RCC_OscConfig+0x92>
 8001058:	4baa      	ldr	r3, [pc, #680]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800105a:	4aaa      	ldr	r2, [pc, #680]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	49aa      	ldr	r1, [pc, #680]	; (8001308 <HAL_RCC_OscConfig+0x328>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	4ba7      	ldr	r3, [pc, #668]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001066:	4aa7      	ldr	r2, [pc, #668]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	49a8      	ldr	r1, [pc, #672]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e01e      	b.n	80010b0 <HAL_RCC_OscConfig+0xd0>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d10e      	bne.n	8001098 <HAL_RCC_OscConfig+0xb8>
 800107a:	4ba2      	ldr	r3, [pc, #648]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800107c:	4aa1      	ldr	r2, [pc, #644]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	02c9      	lsls	r1, r1, #11
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4b9e      	ldr	r3, [pc, #632]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800108a:	4a9e      	ldr	r2, [pc, #632]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	0249      	lsls	r1, r1, #9
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e00b      	b.n	80010b0 <HAL_RCC_OscConfig+0xd0>
 8001098:	4b9a      	ldr	r3, [pc, #616]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800109a:	4a9a      	ldr	r2, [pc, #616]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	499a      	ldr	r1, [pc, #616]	; (8001308 <HAL_RCC_OscConfig+0x328>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	4b97      	ldr	r3, [pc, #604]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80010a6:	4a97      	ldr	r2, [pc, #604]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	4998      	ldr	r1, [pc, #608]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d014      	beq.n	80010e2 <HAL_RCC_OscConfig+0x102>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff ff74 	bl	8000fa4 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c2:	f7ff ff6f 	bl	8000fa4 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e268      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d4:	4b8b      	ldr	r3, [pc, #556]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	029b      	lsls	r3, r3, #10
 80010dc:	4013      	ands	r3, r2
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0xe2>
 80010e0:	e015      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff ff5f 	bl	8000fa4 <HAL_GetTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x11e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff ff5a 	bl	8000fa4 <HAL_GetTick>
 80010f0:	0002      	movs	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e253      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	4b81      	ldr	r3, [pc, #516]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	029b      	lsls	r3, r3, #10
 8001106:	4013      	ands	r3, r2
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x10c>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d100      	bne.n	800111a <HAL_RCC_OscConfig+0x13a>
 8001118:	e069      	b.n	80011ee <HAL_RCC_OscConfig+0x20e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800111a:	4b7a      	ldr	r3, [pc, #488]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	220c      	movs	r2, #12
 8001120:	4013      	ands	r3, r2
 8001122:	d00b      	beq.n	800113c <HAL_RCC_OscConfig+0x15c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001124:	4b77      	ldr	r3, [pc, #476]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	220c      	movs	r2, #12
 800112a:	4013      	ands	r3, r2
 800112c:	2b08      	cmp	r3, #8
 800112e:	d11c      	bne.n	800116a <HAL_RCC_OscConfig+0x18a>
 8001130:	4b74      	ldr	r3, [pc, #464]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	025b      	lsls	r3, r3, #9
 8001138:	4013      	ands	r3, r2
 800113a:	d116      	bne.n	800116a <HAL_RCC_OscConfig+0x18a>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113c:	4b71      	ldr	r3, [pc, #452]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2202      	movs	r2, #2
 8001142:	4013      	ands	r3, r2
 8001144:	d005      	beq.n	8001152 <HAL_RCC_OscConfig+0x172>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d001      	beq.n	8001152 <HAL_RCC_OscConfig+0x172>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e229      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001152:	4a6c      	ldr	r2, [pc, #432]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001154:	4b6b      	ldr	r3, [pc, #428]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	21f8      	movs	r1, #248	; 0xf8
 800115a:	438b      	bics	r3, r1
 800115c:	0019      	movs	r1, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	430b      	orrs	r3, r1
 8001166:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001168:	e041      	b.n	80011ee <HAL_RCC_OscConfig+0x20e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d024      	beq.n	80011bc <HAL_RCC_OscConfig+0x1dc>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001172:	4b64      	ldr	r3, [pc, #400]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001174:	4a63      	ldr	r2, [pc, #396]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff ff11 	bl	8000fa4 <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001188:	f7ff ff0c 	bl	8000fa4 <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e205      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	d0f1      	beq.n	8001188 <HAL_RCC_OscConfig+0x1a8>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80011a6:	4b57      	ldr	r3, [pc, #348]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	21f8      	movs	r1, #248	; 0xf8
 80011ac:	438b      	bics	r3, r1
 80011ae:	0019      	movs	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e018      	b.n	80011ee <HAL_RCC_OscConfig+0x20e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011bc:	4b51      	ldr	r3, [pc, #324]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80011be:	4a51      	ldr	r2, [pc, #324]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff feec 	bl	8000fa4 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fee7 	bl	8000fa4 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1e0      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e4:	4b47      	ldr	r3, [pc, #284]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d1f1      	bne.n	80011d2 <HAL_RCC_OscConfig+0x1f2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2208      	movs	r2, #8
 80011f4:	4013      	ands	r3, r2
 80011f6:	d036      	beq.n	8001266 <HAL_RCC_OscConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d019      	beq.n	8001234 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001200:	4b40      	ldr	r3, [pc, #256]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001202:	4a40      	ldr	r2, [pc, #256]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001204:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001206:	2101      	movs	r1, #1
 8001208:	430a      	orrs	r2, r1
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120c:	f7ff feca 	bl	8000fa4 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001216:	f7ff fec5 	bl	8000fa4 <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e1be      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001228:	4b36      	ldr	r3, [pc, #216]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	2202      	movs	r2, #2
 800122e:	4013      	ands	r3, r2
 8001230:	d0f1      	beq.n	8001216 <HAL_RCC_OscConfig+0x236>
 8001232:	e018      	b.n	8001266 <HAL_RCC_OscConfig+0x286>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001234:	4b33      	ldr	r3, [pc, #204]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001236:	4a33      	ldr	r2, [pc, #204]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001238:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800123a:	2101      	movs	r1, #1
 800123c:	438a      	bics	r2, r1
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001240:	f7ff feb0 	bl	8000fa4 <HAL_GetTick>
 8001244:	0003      	movs	r3, r0
 8001246:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124a:	f7ff feab 	bl	8000fa4 <HAL_GetTick>
 800124e:	0002      	movs	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e1a4      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	2202      	movs	r2, #2
 8001262:	4013      	ands	r3, r2
 8001264:	d1f1      	bne.n	800124a <HAL_RCC_OscConfig+0x26a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2204      	movs	r2, #4
 800126c:	4013      	ands	r3, r2
 800126e:	d100      	bne.n	8001272 <HAL_RCC_OscConfig+0x292>
 8001270:	e0b6      	b.n	80013e0 <HAL_RCC_OscConfig+0x400>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2317      	movs	r3, #23
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800127c:	69da      	ldr	r2, [r3, #28]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	055b      	lsls	r3, r3, #21
 8001282:	4013      	ands	r3, r2
 8001284:	d111      	bne.n	80012aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 800128a:	69d2      	ldr	r2, [r2, #28]
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	0549      	lsls	r1, r1, #21
 8001290:	430a      	orrs	r2, r1
 8001292:	61da      	str	r2, [r3, #28]
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001296:	69da      	ldr	r2, [r3, #28]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	055b      	lsls	r3, r3, #21
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012a2:	2317      	movs	r3, #23
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_RCC_OscConfig+0x330>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4013      	ands	r3, r2
 80012b4:	d11a      	bne.n	80012ec <HAL_RCC_OscConfig+0x30c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_RCC_OscConfig+0x330>)
 80012b8:	4a15      	ldr	r2, [pc, #84]	; (8001310 <HAL_RCC_OscConfig+0x330>)
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	0049      	lsls	r1, r1, #1
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fe6e 	bl	8000fa4 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ce:	f7ff fe69 	bl	8000fa4 <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b64      	cmp	r3, #100	; 0x64
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e162      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_RCC_OscConfig+0x330>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4013      	ands	r3, r2
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10f      	bne.n	8001314 <HAL_RCC_OscConfig+0x334>
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80012f6:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 80012f8:	6a12      	ldr	r2, [r2, #32]
 80012fa:	2101      	movs	r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	621a      	str	r2, [r3, #32]
 8001300:	e036      	b.n	8001370 <HAL_RCC_OscConfig+0x390>
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	40021000 	.word	0x40021000
 8001308:	fffeffff 	.word	0xfffeffff
 800130c:	fffbffff 	.word	0xfffbffff
 8001310:	40007000 	.word	0x40007000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x356>
 800131c:	4ba4      	ldr	r3, [pc, #656]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800131e:	4aa4      	ldr	r2, [pc, #656]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001320:	6a12      	ldr	r2, [r2, #32]
 8001322:	2101      	movs	r1, #1
 8001324:	438a      	bics	r2, r1
 8001326:	621a      	str	r2, [r3, #32]
 8001328:	4ba1      	ldr	r3, [pc, #644]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800132a:	4aa1      	ldr	r2, [pc, #644]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800132c:	6a12      	ldr	r2, [r2, #32]
 800132e:	2104      	movs	r1, #4
 8001330:	438a      	bics	r2, r1
 8001332:	621a      	str	r2, [r3, #32]
 8001334:	e01c      	b.n	8001370 <HAL_RCC_OscConfig+0x390>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b05      	cmp	r3, #5
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x378>
 800133e:	4b9c      	ldr	r3, [pc, #624]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001340:	4a9b      	ldr	r2, [pc, #620]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001342:	6a12      	ldr	r2, [r2, #32]
 8001344:	2104      	movs	r1, #4
 8001346:	430a      	orrs	r2, r1
 8001348:	621a      	str	r2, [r3, #32]
 800134a:	4b99      	ldr	r3, [pc, #612]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800134c:	4a98      	ldr	r2, [pc, #608]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800134e:	6a12      	ldr	r2, [r2, #32]
 8001350:	2101      	movs	r1, #1
 8001352:	430a      	orrs	r2, r1
 8001354:	621a      	str	r2, [r3, #32]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0x390>
 8001358:	4b95      	ldr	r3, [pc, #596]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800135a:	4a95      	ldr	r2, [pc, #596]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800135c:	6a12      	ldr	r2, [r2, #32]
 800135e:	2101      	movs	r1, #1
 8001360:	438a      	bics	r2, r1
 8001362:	621a      	str	r2, [r3, #32]
 8001364:	4b92      	ldr	r3, [pc, #584]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001366:	4a92      	ldr	r2, [pc, #584]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001368:	6a12      	ldr	r2, [r2, #32]
 800136a:	2104      	movs	r1, #4
 800136c:	438a      	bics	r2, r1
 800136e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d014      	beq.n	80013a2 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fe14 	bl	8000fa4 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	e009      	b.n	8001396 <HAL_RCC_OscConfig+0x3b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff fe0f 	bl	8000fa4 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	4a89      	ldr	r2, [pc, #548]	; (80015b4 <HAL_RCC_OscConfig+0x5d4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x3b6>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e107      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001396:	4b86      	ldr	r3, [pc, #536]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x3a2>
 80013a0:	e013      	b.n	80013ca <HAL_RCC_OscConfig+0x3ea>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fdff 	bl	8000fa4 <HAL_GetTick>
 80013a6:	0003      	movs	r3, r0
 80013a8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013aa:	e009      	b.n	80013c0 <HAL_RCC_OscConfig+0x3e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ac:	f7ff fdfa 	bl	8000fa4 <HAL_GetTick>
 80013b0:	0002      	movs	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	4a7f      	ldr	r2, [pc, #508]	; (80015b4 <HAL_RCC_OscConfig+0x5d4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x3e0>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e0f2      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c0:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	2202      	movs	r2, #2
 80013c6:	4013      	ands	r3, r2
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013ca:	2317      	movs	r3, #23
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <HAL_RCC_OscConfig+0x400>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d4:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80013d6:	4a76      	ldr	r2, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80013d8:	69d2      	ldr	r2, [r2, #28]
 80013da:	4977      	ldr	r1, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x5d8>)
 80013dc:	400a      	ands	r2, r1
 80013de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2210      	movs	r2, #16
 80013e6:	4013      	ands	r3, r2
 80013e8:	d063      	beq.n	80014b2 <HAL_RCC_OscConfig+0x4d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d12a      	bne.n	8001448 <HAL_RCC_OscConfig+0x468>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013f2:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80013f4:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80013f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013f8:	2104      	movs	r1, #4
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013fe:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001400:	4a6b      	ldr	r2, [pc, #428]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001402:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001404:	2101      	movs	r1, #1
 8001406:	430a      	orrs	r2, r1
 8001408:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fdcb 	bl	8000fa4 <HAL_GetTick>
 800140e:	0003      	movs	r3, r0
 8001410:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x446>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001414:	f7ff fdc6 	bl	8000fa4 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x446>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e0bf      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001426:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142a:	2202      	movs	r2, #2
 800142c:	4013      	ands	r3, r2
 800142e:	d0f1      	beq.n	8001414 <HAL_RCC_OscConfig+0x434>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001430:	4a5f      	ldr	r2, [pc, #380]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001436:	21f8      	movs	r1, #248	; 0xf8
 8001438:	438b      	bics	r3, r1
 800143a:	0019      	movs	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	430b      	orrs	r3, r1
 8001444:	6353      	str	r3, [r2, #52]	; 0x34
 8001446:	e034      	b.n	80014b2 <HAL_RCC_OscConfig+0x4d2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	3305      	adds	r3, #5
 800144e:	d111      	bne.n	8001474 <HAL_RCC_OscConfig+0x494>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001450:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001452:	4a57      	ldr	r2, [pc, #348]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001454:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001456:	2104      	movs	r1, #4
 8001458:	438a      	bics	r2, r1
 800145a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800145c:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800145e:	4b54      	ldr	r3, [pc, #336]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001462:	21f8      	movs	r1, #248	; 0xf8
 8001464:	438b      	bics	r3, r1
 8001466:	0019      	movs	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	430b      	orrs	r3, r1
 8001470:	6353      	str	r3, [r2, #52]	; 0x34
 8001472:	e01e      	b.n	80014b2 <HAL_RCC_OscConfig+0x4d2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001474:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001476:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001478:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800147a:	2104      	movs	r1, #4
 800147c:	430a      	orrs	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001480:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001482:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001486:	2101      	movs	r1, #1
 8001488:	438a      	bics	r2, r1
 800148a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff fd8a 	bl	8000fa4 <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001496:	f7ff fd85 	bl	8000fa4 <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e07e      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014a8:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	2202      	movs	r2, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	d1f1      	bne.n	8001496 <HAL_RCC_OscConfig+0x4b6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d100      	bne.n	80014bc <HAL_RCC_OscConfig+0x4dc>
 80014ba:	e073      	b.n	80015a4 <HAL_RCC_OscConfig+0x5c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014bc:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	220c      	movs	r2, #12
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d100      	bne.n	80014ca <HAL_RCC_OscConfig+0x4ea>
 80014c8:	e06a      	b.n	80015a0 <HAL_RCC_OscConfig+0x5c0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d14b      	bne.n	800156a <HAL_RCC_OscConfig+0x58a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80014d4:	4a36      	ldr	r2, [pc, #216]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	4938      	ldr	r1, [pc, #224]	; (80015bc <HAL_RCC_OscConfig+0x5dc>)
 80014da:	400a      	ands	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fd61 	bl	8000fa4 <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x51a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fd5c 	bl	8000fa4 <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x51a>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e055      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	049b      	lsls	r3, r3, #18
 8001502:	4013      	ands	r3, r2
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x508>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001506:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	210f      	movs	r1, #15
 800150e:	438b      	bics	r3, r1
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	430b      	orrs	r3, r1
 8001518:	62d3      	str	r3, [r2, #44]	; 0x2c
 800151a:	4a25      	ldr	r2, [pc, #148]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4927      	ldr	r1, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x5e0>)
 8001522:	4019      	ands	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	4303      	orrs	r3, r0
 800152e:	430b      	orrs	r3, r1
 8001530:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001534:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0449      	lsls	r1, r1, #17
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fd30 	bl	8000fa4 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x57c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff fd2b 	bl	8000fa4 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e024      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	049b      	lsls	r3, r3, #18
 8001564:	4013      	ands	r3, r2
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x56a>
 8001568:	e01c      	b.n	80015a4 <HAL_RCC_OscConfig+0x5c4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800156c:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	4912      	ldr	r1, [pc, #72]	; (80015bc <HAL_RCC_OscConfig+0x5dc>)
 8001572:	400a      	ands	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fd15 	bl	8000fa4 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x5b2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff fd10 	bl	8000fa4 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x5b2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e009      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	049b      	lsls	r3, r3, #18
 800159a:	4013      	ands	r3, r2
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x5a0>
 800159e:	e001      	b.n	80015a4 <HAL_RCC_OscConfig+0x5c4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x5c6>
    }
  }
  
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b006      	add	sp, #24
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	00001388 	.word	0x00001388
 80015b8:	efffffff 	.word	0xefffffff
 80015bc:	feffffff 	.word	0xfeffffff
 80015c0:	ffc2ffff 	.word	0xffc2ffff

080015c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_ClockConfig+0x19c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	401a      	ands	r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d211      	bcs.n	8001604 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e0:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <HAL_RCC_ClockConfig+0x19c>)
 80015e2:	4a5f      	ldr	r2, [pc, #380]	; (8001760 <HAL_RCC_ClockConfig+0x19c>)
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	2101      	movs	r1, #1
 80015e8:	438a      	bics	r2, r1
 80015ea:	0011      	movs	r1, r2
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015f2:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <HAL_RCC_ClockConfig+0x19c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	401a      	ands	r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0a8      	b.n	8001756 <HAL_RCC_ClockConfig+0x192>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d009      	beq.n	8001622 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160e:	4a55      	ldr	r2, [pc, #340]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 8001610:	4b54      	ldr	r3, [pc, #336]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	21f0      	movs	r1, #240	; 0xf0
 8001616:	438b      	bics	r3, r1
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	430b      	orrs	r3, r1
 8001620:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2201      	movs	r2, #1
 8001628:	4013      	ands	r3, r2
 800162a:	d100      	bne.n	800162e <HAL_RCC_ClockConfig+0x6a>
 800162c:	e067      	b.n	80016fe <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d114      	bne.n	800166c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e087      	b.n	8001756 <HAL_RCC_ClockConfig+0x192>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b45      	ldr	r3, [pc, #276]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	049b      	lsls	r3, r3, #18
 8001656:	4013      	ands	r3, r2
 8001658:	d108      	bne.n	800166c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07b      	b.n	8001756 <HAL_RCC_ClockConfig+0x192>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e074      	b.n	8001756 <HAL_RCC_ClockConfig+0x192>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166c:	4a3d      	ldr	r2, [pc, #244]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2103      	movs	r1, #3
 8001674:	438b      	bics	r3, r1
 8001676:	0019      	movs	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	430b      	orrs	r3, r1
 800167e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff fc90 	bl	8000fa4 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d111      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001690:	e009      	b.n	80016a6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001692:	f7ff fc87 	bl	8000fa4 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a32      	ldr	r2, [pc, #200]	; (8001768 <HAL_RCC_ClockConfig+0x1a4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e057      	b.n	8001756 <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	220c      	movs	r2, #12
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d1ef      	bne.n	8001692 <HAL_RCC_ClockConfig+0xce>
 80016b2:	e024      	b.n	80016fe <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d11b      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016bc:	e009      	b.n	80016d2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016be:	f7ff fc71 	bl	8000fa4 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <HAL_RCC_ClockConfig+0x1a4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e041      	b.n	8001756 <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	220c      	movs	r2, #12
 80016d8:	4013      	ands	r3, r2
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d1ef      	bne.n	80016be <HAL_RCC_ClockConfig+0xfa>
 80016de:	e00e      	b.n	80016fe <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e0:	f7ff fc60 	bl	8000fa4 <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <HAL_RCC_ClockConfig+0x1a4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e030      	b.n	8001756 <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	220c      	movs	r2, #12
 80016fa:	4013      	ands	r3, r2
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_RCC_ClockConfig+0x19c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2201      	movs	r2, #1
 8001704:	401a      	ands	r2, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d911      	bls.n	8001730 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_RCC_ClockConfig+0x19c>)
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <HAL_RCC_ClockConfig+0x19c>)
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	2101      	movs	r1, #1
 8001714:	438a      	bics	r2, r1
 8001716:	0011      	movs	r1, r2
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_RCC_ClockConfig+0x19c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	401a      	ands	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e012      	b.n	8001756 <HAL_RCC_ClockConfig+0x192>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2204      	movs	r2, #4
 8001736:	4013      	ands	r3, r2
 8001738:	d008      	beq.n	800174c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1a0>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	490a      	ldr	r1, [pc, #40]	; (800176c <HAL_RCC_ClockConfig+0x1a8>)
 8001742:	4019      	ands	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	430b      	orrs	r3, r1
 800174a:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_RCC_ClockConfig+0x1ac>)
 800174e:	22e1      	movs	r2, #225	; 0xe1
 8001750:	03d2      	lsls	r2, r2, #15
 8001752:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b004      	add	sp, #16
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40022000 	.word	0x40022000
 8001764:	40021000 	.word	0x40021000
 8001768:	00001388 	.word	0x00001388
 800176c:	fffff8ff 	.word	0xfffff8ff
 8001770:	20000010 	.word	0x20000010

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800178a:	e14f      	b.n	8001a2c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4091      	lsls	r1, r2
 8001796:	000a      	movs	r2, r1
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d100      	bne.n	80017a4 <HAL_GPIO_Init+0x30>
 80017a2:	e140      	b.n	8001a26 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x40>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b12      	cmp	r3, #18
 80017b2:	d123      	bne.n	80017fc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	58d3      	ldr	r3, [r2, r3]
 80017c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2207      	movs	r2, #7
 80017c6:	4013      	ands	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2107      	movs	r1, #7
 80017e0:	400b      	ands	r3, r1
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	409a      	lsls	r2, r3
 80017e6:	0013      	movs	r3, r2
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	6939      	ldr	r1, [r7, #16]
 80017fa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	409a      	lsls	r2, r3
 800180a:	0013      	movs	r3, r2
 800180c:	43da      	mvns	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2203      	movs	r2, #3
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	409a      	lsls	r2, r3
 8001822:	0013      	movs	r3, r2
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d00b      	beq.n	8001850 <HAL_GPIO_Init+0xdc>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001844:	2b11      	cmp	r3, #17
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b12      	cmp	r3, #18
 800184e:	d130      	bne.n	80018b2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	409a      	lsls	r2, r3
 800185e:	0013      	movs	r3, r2
 8001860:	43da      	mvns	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	409a      	lsls	r2, r3
 8001872:	0013      	movs	r3, r2
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001886:	2201      	movs	r2, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	43da      	mvns	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	2201      	movs	r2, #1
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
 80018a4:	0013      	movs	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	409a      	lsls	r2, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	43da      	mvns	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	055b      	lsls	r3, r3, #21
 80018ea:	4013      	ands	r3, r2
 80018ec:	d100      	bne.n	80018f0 <HAL_GPIO_Init+0x17c>
 80018ee:	e09a      	b.n	8001a26 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f0:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80018f2:	4a54      	ldr	r2, [pc, #336]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80018f4:	6992      	ldr	r2, [r2, #24]
 80018f6:	2101      	movs	r1, #1
 80018f8:	430a      	orrs	r2, r1
 80018fa:	619a      	str	r2, [r3, #24]
 80018fc:	4b51      	ldr	r3, [pc, #324]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001908:	4a4f      	ldr	r2, [pc, #316]	; (8001a48 <HAL_GPIO_Init+0x2d4>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	589b      	ldr	r3, [r3, r2]
 8001914:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2203      	movs	r2, #3
 800191a:	4013      	ands	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	409a      	lsls	r2, r3
 8001922:	0013      	movs	r3, r2
 8001924:	43da      	mvns	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	2390      	movs	r3, #144	; 0x90
 8001930:	05db      	lsls	r3, r3, #23
 8001932:	429a      	cmp	r2, r3
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x1ea>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <HAL_GPIO_Init+0x2d8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x1e6>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a43      	ldr	r2, [pc, #268]	; (8001a50 <HAL_GPIO_Init+0x2dc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x1e2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x1de>
 800194e:	2303      	movs	r3, #3
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x1ec>
 8001952:	2305      	movs	r3, #5
 8001954:	e004      	b.n	8001960 <HAL_GPIO_Init+0x1ec>
 8001956:	2302      	movs	r3, #2
 8001958:	e002      	b.n	8001960 <HAL_GPIO_Init+0x1ec>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_GPIO_Init+0x1ec>
 800195e:	2300      	movs	r3, #0
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	2103      	movs	r1, #3
 8001964:	400a      	ands	r2, r1
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	4093      	lsls	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001970:	4935      	ldr	r1, [pc, #212]	; (8001a48 <HAL_GPIO_Init+0x2d4>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197e:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43da      	mvns	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	025b      	lsls	r3, r3, #9
 8001996:	4013      	ands	r3, r2
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43da      	mvns	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	029b      	lsls	r3, r3, #10
 80019c0:	4013      	ands	r3, r2
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43da      	mvns	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	035b      	lsls	r3, r3, #13
 80019ea:	4013      	ands	r3, r2
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43da      	mvns	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	039b      	lsls	r3, r3, #14
 8001a14:	4013      	ands	r3, r2
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	40da      	lsrs	r2, r3
 8001a34:	1e13      	subs	r3, r2, #0
 8001a36:	d000      	beq.n	8001a3a <HAL_GPIO_Init+0x2c6>
 8001a38:	e6a8      	b.n	800178c <HAL_GPIO_Init+0x18>
  } 
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b006      	add	sp, #24
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	48000800 	.word	0x48000800
 8001a54:	48000c00 	.word	0x48000c00
 8001a58:	40010400 	.word	0x40010400

08001a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	0008      	movs	r0, r1
 8001a66:	0011      	movs	r1, r2
 8001a68:	1cbb      	adds	r3, r7, #2
 8001a6a:	1c02      	adds	r2, r0, #0
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	1c7b      	adds	r3, r7, #1
 8001a70:	1c0a      	adds	r2, r1, #0
 8001a72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a74:	1c7b      	adds	r3, r7, #1
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a7c:	1cbb      	adds	r3, r7, #2
 8001a7e:	881a      	ldrh	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8001a84:	e003      	b.n	8001a8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a86:	1cbb      	adds	r3, r7, #2
 8001a88:	881a      	ldrh	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
}										  
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)

08001a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	1dfb      	adds	r3, r7, #7
 8001aa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aa8:	e02b      	b.n	8001b02 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	3301      	adds	r3, #1
 8001aae:	d028      	beq.n	8001b02 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001ab6:	f7ff fa75 	bl	8000fa4 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d91d      	bls.n	8001b02 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	4916      	ldr	r1, [pc, #88]	; (8001b2c <UART_WaitOnFlagUntilTimeout+0x94>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	6892      	ldr	r2, [r2, #8]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	438a      	bics	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2269      	movs	r2, #105	; 0x69
 8001aea:	2120      	movs	r1, #32
 8001aec:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	226a      	movs	r2, #106	; 0x6a
 8001af2:	2120      	movs	r1, #32
 8001af4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2268      	movs	r2, #104	; 0x68
 8001afa:	2100      	movs	r1, #0
 8001afc:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e00f      	b.n	8001b22 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	425a      	negs	r2, r3
 8001b12:	4153      	adcs	r3, r2
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	001a      	movs	r2, r3
 8001b18:	1dfb      	adds	r3, r7, #7
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d0c4      	beq.n	8001aaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b004      	add	sp, #16
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	fffffe5f 	.word	0xfffffe5f

08001b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2269      	movs	r2, #105	; 0x69
 8001b42:	2120      	movs	r1, #32
 8001b44:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	226a      	movs	r2, #106	; 0x6a
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2268      	movs	r2, #104	; 0x68
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <UART_SetConfig>:

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001b6c:	2317      	movs	r3, #23
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2210      	movs	r2, #16
 8001b72:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001b74:	230a      	movs	r3, #10
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2200      	movs	r2, #0
 8001b7a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001b7c:	2314      	movs	r3, #20
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2200      	movs	r2, #0
 8001b82:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b84:	2313      	movs	r3, #19
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	4995      	ldr	r1, [pc, #596]	; (8001e04 <UART_SetConfig+0x2a4>)
 8001bb0:	4011      	ands	r1, r2
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	6852      	ldr	r2, [r2, #4]
 8001bc2:	4991      	ldr	r1, [pc, #580]	; (8001e08 <UART_SetConfig+0x2a8>)
 8001bc4:	4011      	ands	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68d2      	ldr	r2, [r2, #12]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	6892      	ldr	r2, [r2, #8]
 8001be4:	4989      	ldr	r1, [pc, #548]	; (8001e0c <UART_SetConfig+0x2ac>)
 8001be6:	4011      	ands	r1, r2
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bee:	4b88      	ldr	r3, [pc, #544]	; (8001e10 <UART_SetConfig+0x2b0>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d00f      	beq.n	8001c1a <UART_SetConfig+0xba>
 8001bfa:	d304      	bcc.n	8001c06 <UART_SetConfig+0xa6>
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d011      	beq.n	8001c24 <UART_SetConfig+0xc4>
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d005      	beq.n	8001c10 <UART_SetConfig+0xb0>
 8001c04:	e013      	b.n	8001c2e <UART_SetConfig+0xce>
 8001c06:	2317      	movs	r3, #23
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	e012      	b.n	8001c36 <UART_SetConfig+0xd6>
 8001c10:	2317      	movs	r3, #23
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2202      	movs	r2, #2
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	e00d      	b.n	8001c36 <UART_SetConfig+0xd6>
 8001c1a:	2317      	movs	r3, #23
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2204      	movs	r2, #4
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e008      	b.n	8001c36 <UART_SetConfig+0xd6>
 8001c24:	2317      	movs	r3, #23
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	2208      	movs	r2, #8
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	e003      	b.n	8001c36 <UART_SetConfig+0xd6>
 8001c2e:	2317      	movs	r3, #23
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2210      	movs	r2, #16
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d000      	beq.n	8001c46 <UART_SetConfig+0xe6>
 8001c44:	e07b      	b.n	8001d3e <UART_SetConfig+0x1de>
  {
    switch (clocksource)
 8001c46:	2317      	movs	r3, #23
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d01c      	beq.n	8001c8a <UART_SetConfig+0x12a>
 8001c50:	dc02      	bgt.n	8001c58 <UART_SetConfig+0xf8>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <UART_SetConfig+0x102>
 8001c56:	e04f      	b.n	8001cf8 <UART_SetConfig+0x198>
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d027      	beq.n	8001cac <UART_SetConfig+0x14c>
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d039      	beq.n	8001cd4 <UART_SetConfig+0x174>
 8001c60:	e04a      	b.n	8001cf8 <UART_SetConfig+0x198>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c62:	f7ff f9b5 	bl	8000fd0 <HAL_RCC_GetPCLK1Freq>
 8001c66:	0003      	movs	r3, r0
 8001c68:	005a      	lsls	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	18d2      	adds	r2, r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0019      	movs	r1, r3
 8001c78:	0010      	movs	r0, r2
 8001c7a:	f7fe fadf 	bl	800023c <__udivsi3>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	001a      	movs	r2, r3
 8001c82:	2314      	movs	r3, #20
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	801a      	strh	r2, [r3, #0]
        break;
 8001c88:	e03b      	b.n	8001d02 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	4a60      	ldr	r2, [pc, #384]	; (8001e14 <UART_SetConfig+0x2b4>)
 8001c92:	189a      	adds	r2, r3, r2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	0019      	movs	r1, r3
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	f7fe face 	bl	800023c <__udivsi3>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	2314      	movs	r3, #20
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	801a      	strh	r2, [r3, #0]
        break;
 8001caa:	e02a      	b.n	8001d02 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cac:	f7ff f988 	bl	8000fc0 <HAL_RCC_GetSysClockFreq>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	005a      	lsls	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	085b      	lsrs	r3, r3, #1
 8001cba:	18d2      	adds	r2, r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	0010      	movs	r0, r2
 8001cc4:	f7fe faba 	bl	800023c <__udivsi3>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	001a      	movs	r2, r3
 8001ccc:	2314      	movs	r3, #20
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	801a      	strh	r2, [r3, #0]
        break;
 8001cd2:	e016      	b.n	8001d02 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	0252      	lsls	r2, r2, #9
 8001cde:	189a      	adds	r2, r3, r2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	0010      	movs	r0, r2
 8001ce8:	f7fe faa8 	bl	800023c <__udivsi3>
 8001cec:	0003      	movs	r3, r0
 8001cee:	001a      	movs	r2, r3
 8001cf0:	2314      	movs	r3, #20
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	801a      	strh	r2, [r3, #0]
        break;
 8001cf6:	e004      	b.n	8001d02 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001cf8:	2313      	movs	r3, #19
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
        break;
 8001d00:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001d02:	230a      	movs	r3, #10
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2214      	movs	r2, #20
 8001d08:	18ba      	adds	r2, r7, r2
 8001d0a:	8812      	ldrh	r2, [r2, #0]
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	438a      	bics	r2, r1
 8001d10:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d12:	2314      	movs	r3, #20
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	105b      	asrs	r3, r3, #1
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	4013      	ands	r3, r2
 8001d20:	b299      	uxth	r1, r3
 8001d22:	230a      	movs	r3, #10
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	220a      	movs	r2, #10
 8001d28:	18ba      	adds	r2, r7, r2
 8001d2a:	8812      	ldrh	r2, [r2, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	220a      	movs	r2, #10
 8001d36:	18ba      	adds	r2, r7, r2
 8001d38:	8812      	ldrh	r2, [r2, #0]
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	e05b      	b.n	8001df6 <UART_SetConfig+0x296>
  }
  else
  {
    switch (clocksource)
 8001d3e:	2317      	movs	r3, #23
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d01b      	beq.n	8001d80 <UART_SetConfig+0x220>
 8001d48:	dc02      	bgt.n	8001d50 <UART_SetConfig+0x1f0>
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <UART_SetConfig+0x1fa>
 8001d4e:	e04d      	b.n	8001dec <UART_SetConfig+0x28c>
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d026      	beq.n	8001da2 <UART_SetConfig+0x242>
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d037      	beq.n	8001dc8 <UART_SetConfig+0x268>
 8001d58:	e048      	b.n	8001dec <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681c      	ldr	r4, [r3, #0]
 8001d5e:	f7ff f937 	bl	8000fd0 <HAL_RCC_GetPCLK1Freq>
 8001d62:	0002      	movs	r2, r0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	18d2      	adds	r2, r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0019      	movs	r1, r3
 8001d72:	0010      	movs	r0, r2
 8001d74:	f7fe fa62 	bl	800023c <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	60e3      	str	r3, [r4, #12]
        break;
 8001d7e:	e03a      	b.n	8001df6 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681c      	ldr	r4, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <UART_SetConfig+0x2b8>)
 8001d8c:	189a      	adds	r2, r3, r2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	0019      	movs	r1, r3
 8001d94:	0010      	movs	r0, r2
 8001d96:	f7fe fa51 	bl	800023c <__udivsi3>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	60e3      	str	r3, [r4, #12]
        break;
 8001da0:	e029      	b.n	8001df6 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681c      	ldr	r4, [r3, #0]
 8001da6:	f7ff f90b 	bl	8000fc0 <HAL_RCC_GetSysClockFreq>
 8001daa:	0002      	movs	r2, r0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	18d2      	adds	r2, r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	0019      	movs	r1, r3
 8001dba:	0010      	movs	r0, r2
 8001dbc:	f7fe fa3e 	bl	800023c <__udivsi3>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	60e3      	str	r3, [r4, #12]
        break;
 8001dc6:	e016      	b.n	8001df6 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681c      	ldr	r4, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	0212      	lsls	r2, r2, #8
 8001dd6:	189a      	adds	r2, r3, r2
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0019      	movs	r1, r3
 8001dde:	0010      	movs	r0, r2
 8001de0:	f7fe fa2c 	bl	800023c <__udivsi3>
 8001de4:	0003      	movs	r3, r0
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	60e3      	str	r3, [r4, #12]
        break;
 8001dea:	e004      	b.n	8001df6 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001dec:	2313      	movs	r3, #19
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
        break;
 8001df4:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001df6:	2313      	movs	r3, #19
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]

}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b007      	add	sp, #28
 8001e02:	bd90      	pop	{r4, r7, pc}
 8001e04:	ffff69f3 	.word	0xffff69f3
 8001e08:	ffffcfff 	.word	0xffffcfff
 8001e0c:	fffff4ff 	.word	0xfffff4ff
 8001e10:	40021000 	.word	0x40021000
 8001e14:	01e84800 	.word	0x01e84800
 8001e18:	00f42400 	.word	0x00f42400

08001e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e03b      	b.n	8001ea6 <HAL_UART_Init+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2269      	movs	r2, #105	; 0x69
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d103      	bne.n	8001e42 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2268      	movs	r2, #104	; 0x68
 8001e3e:	2100      	movs	r1, #0
 8001e40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2269      	movs	r2, #105	; 0x69
 8001e46:	2124      	movs	r1, #36	; 0x24
 8001e48:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	438a      	bics	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff fe7f 	bl	8001b60 <UART_SetConfig>
 8001e62:	0003      	movs	r3, r0
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_UART_Init+0x50>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e01c      	b.n	8001ea6 <HAL_UART_Init+0x8a>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	6852      	ldr	r2, [r2, #4]
 8001e76:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <HAL_UART_Init+0x94>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	6892      	ldr	r2, [r2, #8]
 8001e86:	2108      	movs	r1, #8
 8001e88:	438a      	bics	r2, r1
 8001e8a:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	2101      	movs	r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7ff fe46 	bl	8001b30 <UART_CheckIdleState>
 8001ea4:	0003      	movs	r3, r0
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b002      	add	sp, #8
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	fffff7ff 	.word	0xfffff7ff

08001eb4 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	1dbb      	adds	r3, r7, #6
 8001ec2:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	226a      	movs	r2, #106	; 0x6a
 8001ecc:	5c9b      	ldrb	r3, [r3, r2]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d000      	beq.n	8001ed6 <HAL_UART_Receive+0x22>
 8001ed4:	e0b4      	b.n	8002040 <HAL_UART_Receive+0x18c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_UART_Receive+0x30>
 8001edc:	1dbb      	adds	r3, r7, #6
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0ac      	b.n	8002042 <HAL_UART_Receive+0x18e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	015b      	lsls	r3, r3, #5
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d109      	bne.n	8001f08 <HAL_UART_Receive+0x54>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d001      	beq.n	8001f08 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e09c      	b.n	8002042 <HAL_UART_Receive+0x18e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2268      	movs	r2, #104	; 0x68
 8001f0c:	5c9b      	ldrb	r3, [r3, r2]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_UART_Receive+0x62>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e095      	b.n	8002042 <HAL_UART_Receive+0x18e>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2268      	movs	r2, #104	; 0x68
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	226a      	movs	r2, #106	; 0x6a
 8001f28:	2122      	movs	r1, #34	; 0x22
 8001f2a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001f2c:	f7ff f83a 	bl	8000fa4 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1dba      	adds	r2, r7, #6
 8001f38:	2158      	movs	r1, #88	; 0x58
 8001f3a:	8812      	ldrh	r2, [r2, #0]
 8001f3c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1dba      	adds	r2, r7, #6
 8001f42:	215a      	movs	r1, #90	; 0x5a
 8001f44:	8812      	ldrh	r2, [r2, #0]
 8001f46:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	015b      	lsls	r3, r3, #5
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d10d      	bne.n	8001f70 <HAL_UART_Receive+0xbc>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d104      	bne.n	8001f66 <HAL_UART_Receive+0xb2>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	225c      	movs	r2, #92	; 0x5c
 8001f60:	493a      	ldr	r1, [pc, #232]	; (800204c <HAL_UART_Receive+0x198>)
 8001f62:	5299      	strh	r1, [r3, r2]
 8001f64:	e015      	b.n	8001f92 <HAL_UART_Receive+0xde>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	225c      	movs	r2, #92	; 0x5c
 8001f6a:	21ff      	movs	r1, #255	; 0xff
 8001f6c:	5299      	strh	r1, [r3, r2]
 8001f6e:	e010      	b.n	8001f92 <HAL_UART_Receive+0xde>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10c      	bne.n	8001f92 <HAL_UART_Receive+0xde>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <HAL_UART_Receive+0xd6>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	225c      	movs	r2, #92	; 0x5c
 8001f84:	21ff      	movs	r1, #255	; 0xff
 8001f86:	5299      	strh	r1, [r3, r2]
 8001f88:	e003      	b.n	8001f92 <HAL_UART_Receive+0xde>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	225c      	movs	r2, #92	; 0x5c
 8001f8e:	217f      	movs	r1, #127	; 0x7f
 8001f90:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001f92:	231a      	movs	r3, #26
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	215c      	movs	r1, #92	; 0x5c
 8001f9a:	5a52      	ldrh	r2, [r2, r1]
 8001f9c:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001f9e:	e03f      	b.n	8002020 <HAL_UART_Receive+0x16c>
    {
      huart->RxXferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	225a      	movs	r2, #90	; 0x5a
 8001fa4:	5a9b      	ldrh	r3, [r3, r2]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b299      	uxth	r1, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	225a      	movs	r2, #90	; 0x5a
 8001fb0:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	0013      	movs	r3, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2120      	movs	r1, #32
 8001fc0:	f7ff fd6a 	bl	8001a98 <UART_WaitOnFlagUntilTimeout>
 8001fc4:	1e03      	subs	r3, r0, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_UART_Receive+0x118>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e03a      	b.n	8002042 <HAL_UART_Receive+0x18e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	015b      	lsls	r3, r3, #5
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d114      	bne.n	8002002 <HAL_UART_Receive+0x14e>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d110      	bne.n	8002002 <HAL_UART_Receive+0x14e>
      {
        tmp = (uint16_t*) pData ;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	221a      	movs	r2, #26
 8001fee:	18ba      	adds	r2, r7, r2
 8001ff0:	8812      	ldrh	r2, [r2, #0]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	e00e      	b.n	8002020 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	60ba      	str	r2, [r7, #8]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800200e:	b292      	uxth	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	211a      	movs	r1, #26
 8002014:	1879      	adds	r1, r7, r1
 8002016:	8809      	ldrh	r1, [r1, #0]
 8002018:	b2c9      	uxtb	r1, r1
 800201a:	400a      	ands	r2, r1
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	225a      	movs	r2, #90	; 0x5a
 8002024:	5a9b      	ldrh	r3, [r3, r2]
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1b9      	bne.n	8001fa0 <HAL_UART_Receive+0xec>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	226a      	movs	r2, #106	; 0x6a
 8002030:	2120      	movs	r1, #32
 8002032:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2268      	movs	r2, #104	; 0x68
 8002038:	2100      	movs	r1, #0
 800203a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_UART_Receive+0x18e>
  }
  else
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
  }
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b008      	add	sp, #32
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	000001ff 	.word	0x000001ff

08002050 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	1dbb      	adds	r3, r7, #6
 800205e:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2269      	movs	r2, #105	; 0x69
 8002068:	5c9b      	ldrb	r3, [r3, r2]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b20      	cmp	r3, #32
 800206e:	d000      	beq.n	8002072 <HAL_UART_Transmit+0x22>
 8002070:	e08c      	b.n	800218c <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_UART_Transmit+0x30>
 8002078:	1dbb      	adds	r3, r7, #6
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e084      	b.n	800218e <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	015b      	lsls	r3, r3, #5
 800208c:	429a      	cmp	r2, r3
 800208e:	d109      	bne.n	80020a4 <HAL_UART_Transmit+0x54>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	d001      	beq.n	80020a4 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e074      	b.n	800218e <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2268      	movs	r2, #104	; 0x68
 80020a8:	5c9b      	ldrb	r3, [r3, r2]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_UART_Transmit+0x62>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e06d      	b.n	800218e <HAL_UART_Transmit+0x13e>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2268      	movs	r2, #104	; 0x68
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2269      	movs	r2, #105	; 0x69
 80020c4:	2121      	movs	r1, #33	; 0x21
 80020c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80020c8:	f7fe ff6c 	bl	8000fa4 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1dba      	adds	r2, r7, #6
 80020d4:	2150      	movs	r1, #80	; 0x50
 80020d6:	8812      	ldrh	r2, [r2, #0]
 80020d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1dba      	adds	r2, r7, #6
 80020de:	2152      	movs	r1, #82	; 0x52
 80020e0:	8812      	ldrh	r2, [r2, #0]
 80020e2:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 80020e4:	e035      	b.n	8002152 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2252      	movs	r2, #82	; 0x52
 80020ea:	5a9b      	ldrh	r3, [r3, r2]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b299      	uxth	r1, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2252      	movs	r2, #82	; 0x52
 80020f6:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	0013      	movs	r3, r2
 8002102:	2200      	movs	r2, #0
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	f7ff fcc7 	bl	8001a98 <UART_WaitOnFlagUntilTimeout>
 800210a:	1e03      	subs	r3, r0, #0
 800210c:	d001      	beq.n	8002112 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e03d      	b.n	800218e <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	015b      	lsls	r3, r3, #5
 800211a:	429a      	cmp	r2, r3
 800211c:	d111      	bne.n	8002142 <HAL_UART_Transmit+0xf2>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10d      	bne.n	8002142 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	8812      	ldrh	r2, [r2, #0]
 8002132:	05d2      	lsls	r2, r2, #23
 8002134:	0dd2      	lsrs	r2, r2, #23
 8002136:	b292      	uxth	r2, r2
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3302      	adds	r3, #2
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	e007      	b.n	8002152 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1c59      	adds	r1, r3, #1
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2252      	movs	r2, #82	; 0x52
 8002156:	5a9b      	ldrh	r3, [r3, r2]
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1c3      	bne.n	80020e6 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	0013      	movs	r3, r2
 8002168:	2200      	movs	r2, #0
 800216a:	2140      	movs	r1, #64	; 0x40
 800216c:	f7ff fc94 	bl	8001a98 <UART_WaitOnFlagUntilTimeout>
 8002170:	1e03      	subs	r3, r0, #0
 8002172:	d001      	beq.n	8002178 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e00a      	b.n	800218e <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2269      	movs	r2, #105	; 0x69
 800217c:	2120      	movs	r1, #32
 800217e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2268      	movs	r2, #104	; 0x68
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b006      	add	sp, #24
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)

08002198 <Reset_Handler>:
 8002198:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800219a:	e003      	b.n	80021a4 <LoopCopyDataInit>

0800219c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 800219e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021a2:	3104      	adds	r1, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80021a4:	480a      	ldr	r0, [pc, #40]	; (80021d0 <LoopForever+0x6>)
	ldr	r3, =_edata
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <LoopForever+0xa>)
	adds	r2, r0, r1
 80021a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021ac:	d3f6      	bcc.n	800219c <CopyDataInit>
	ldr	r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <LoopForever+0xe>)
	b	LoopFillZerobss
 80021b0:	e002      	b.n	80021b8 <LoopFillZerobss>

080021b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 80021b2:	2300      	movs	r3, #0
 	str  r3, [r2]
 80021b4:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 80021b6:	3204      	adds	r2, #4

080021b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <LoopForever+0x12>)
	cmp	r2, r3
 80021ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80021bc:	d3f9      	bcc.n	80021b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021be:	e000      	b.n	80021c2 <LoopFillZerobss+0xa>
 80021c0:	bf00      	nop
/* Call static constructors */
    bl __libc_init_array
 80021c2:	f7fe fac5 	bl	8000750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021c6:	f7fe fb7b 	bl	80008c0 <main>

080021ca <LoopForever>:

LoopForever:
    b LoopForever
 80021ca:	e7fe      	b.n	80021ca <LoopForever>
 80021cc:	08002204 	.word	0x08002204
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000014 	.word	0x20000014
 80021d8:	20000014 	.word	0x20000014
 80021dc:	20000120 	.word	0x20000120

080021e0 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <BusFault_Handler>
 80021e2:	0000      	movs	r0, r0

080021e4 <_init>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ea:	bc08      	pop	{r3}
 80021ec:	469e      	mov	lr, r3
 80021ee:	4770      	bx	lr

080021f0 <_fini>:
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f6:	bc08      	pop	{r3}
 80021f8:	469e      	mov	lr, r3
 80021fa:	4770      	bx	lr
