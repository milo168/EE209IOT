   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ECE209-proj.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.get_key,"ax",%progbits
  20              		.align	2
  21              		.global	get_key
  22              		.code	16
  23              		.thumb_func
  25              	get_key:
  26              	.LFB0:
  27              		.file 1 "ECE209-proj.c"
   1:ECE209-proj.c **** /*
   2:ECE209-proj.c ****     This file is part of the ChipWhisperer Example Targets
   3:ECE209-proj.c ****     Copyright (C) 2012-2017 NewAE Technology Inc.
   4:ECE209-proj.c **** 
   5:ECE209-proj.c ****     This program is free software: you can redistribute it and/or modify
   6:ECE209-proj.c ****     it under the terms of the GNU General Public License as published by
   7:ECE209-proj.c ****     the Free Software Foundation, either version 3 of the License, or
   8:ECE209-proj.c ****     (at your option) any later version.
   9:ECE209-proj.c **** 
  10:ECE209-proj.c ****     This program is distributed in the hope that it will be useful,
  11:ECE209-proj.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:ECE209-proj.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:ECE209-proj.c ****     GNU General Public License for more details.
  14:ECE209-proj.c **** 
  15:ECE209-proj.c ****     You should have received a copy of the GNU General Public License
  16:ECE209-proj.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:ECE209-proj.c **** */
  18:ECE209-proj.c **** 
  19:ECE209-proj.c **** #include "hal.h"
  20:ECE209-proj.c **** #include <stdint.h>
  21:ECE209-proj.c **** #include <stdlib.h>
  22:ECE209-proj.c **** 
  23:ECE209-proj.c **** #include "simpleserial.h"
  24:ECE209-proj.c **** 
  25:ECE209-proj.c **** uint8_t get_key(uint8_t* k)
  26:ECE209-proj.c **** {
  28              		.loc 1 26 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  27:ECE209-proj.c **** 	// Load key here
  28:ECE209-proj.c **** 	return 0x00;
  44              		.loc 1 28 0
  45 0008 0023     		movs	r3, #0
  29:ECE209-proj.c **** }
  46              		.loc 1 29 0
  47 000a 1800     		movs	r0, r3
  48 000c BD46     		mov	sp, r7
  49 000e 02B0     		add	sp, sp, #8
  50              		@ sp needed
  51 0010 80BD     		pop	{r7, pc}
  52              		.cfi_endproc
  53              	.LFE0:
  55 0012 C046     		.section	.text.delay_2_ms,"ax",%progbits
  56              		.align	2
  57              		.code	16
  58              		.thumb_func
  60              	delay_2_ms:
  61              	.LFB1:
  30:ECE209-proj.c **** 
  31:ECE209-proj.c **** static void delay_2_ms(void)
  32:ECE209-proj.c **** {
  62              		.loc 1 32 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 8
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66 0000 80B5     		push	{r7, lr}
  67              	.LCFI3:
  68              		.cfi_def_cfa_offset 8
  69              		.cfi_offset 7, -8
  70              		.cfi_offset 14, -4
  71 0002 82B0     		sub	sp, sp, #8
  72              	.LCFI4:
  73              		.cfi_def_cfa_offset 16
  74 0004 00AF     		add	r7, sp, #0
  75              	.LCFI5:
  76              		.cfi_def_cfa_register 7
  77              	.LBB2:
  33:ECE209-proj.c ****   for (volatile unsigned int i=0; i < 0xfff; i++ ){
  78              		.loc 1 33 0
  79 0006 0023     		movs	r3, #0
  80 0008 7B60     		str	r3, [r7, #4]
  81 000a 02E0     		b	.L4
  82              	.L5:
  83              		.loc 1 33 0 is_stmt 0 discriminator 3
  84 000c 7B68     		ldr	r3, [r7, #4]
  85 000e 0133     		adds	r3, r3, #1
  86 0010 7B60     		str	r3, [r7, #4]
  87              	.L4:
  88              		.loc 1 33 0 discriminator 1
  89 0012 7B68     		ldr	r3, [r7, #4]
  90 0014 034A     		ldr	r2, .L6
  91 0016 9342     		cmp	r3, r2
  92 0018 F8D9     		bls	.L5
  93              	.LBE2:
  34:ECE209-proj.c ****     ;
  35:ECE209-proj.c ****   }
  36:ECE209-proj.c **** }
  94              		.loc 1 36 0 is_stmt 1
  95 001a C046     		nop
  96 001c BD46     		mov	sp, r7
  97 001e 02B0     		add	sp, sp, #8
  98              		@ sp needed
  99 0020 80BD     		pop	{r7, pc}
 100              	.L7:
 101 0022 C046     		.align	2
 102              	.L6:
 103 0024 FE0F0000 		.word	4094
 104              		.cfi_endproc
 105              	.LFE1:
 107              		.global	weight
 108              		.data
 109              		.align	2
 112              	weight:
 113 0000 C7F0783E 		.word	1048113351
 114 0004 1AC20D3F 		.word	1057866266
 115 0008 91EF463F 		.word	1061613457
 116 000c 0342CB3D 		.word	1036730883
 117 0010 E4830A3F 		.word	1057653732
 118 0014 7BBB453F 		.word	1061534587
 119 0018 5DDD553F 		.word	1062591837
 120 001c 6F47E03E 		.word	1054885743
 121 0020 09A94B3E 		.word	1045145865
 122 0024 7522413C 		.word	1010901621
 123 0028 E5EF1A3F 		.word	1058729957
 124 002c 2575163F 		.word	1058436389
 125 0030 F354CF3E 		.word	1053775091
 126 0034 AE29003F 		.word	1056975278
 127 0038 4831143F 		.word	1058287944
 128 003c 9775233F 		.word	1059288471
 129 0040 670C133F 		.word	1058212967
 130 0044 AB3FC23D 		.word	1036140459
 131 0048 F94C563E 		.word	1045843193
 132 004c 79030C3D 		.word	1024197497
 133 0050 D447E83E 		.word	1055410132
 134 0054 E9F0443F 		.word	1061482729
 135 0058 50FC903E 		.word	1049689168
 136 005c 01F6E93E 		.word	1055520257
 137 0060 55C1F83E 		.word	1056489813
 138 0064 E38D9C3E 		.word	1050447331
 139 0068 FA281F3F 		.word	1059006714
 140 006c E04D2F3F 		.word	1060064736
 141              		.global	imagePixel
 142              		.align	2
 145              	imagePixel:
 146 0070 00000000 		.word	0
 147 0074 00000000 		.word	0
 148 0078 0000803F 		.word	1065353216
 149 007c 00000000 		.word	0
 150 0080 0000803F 		.word	1065353216
 151 0084 0000803F 		.word	1065353216
 152 0088 0000803F 		.word	1065353216
 153 008c 0000803F 		.word	1065353216
 154 0090 0000803F 		.word	1065353216
 155 0094 0000803F 		.word	1065353216
 156 0098 0000803F 		.word	1065353216
 157 009c 0000803F 		.word	1065353216
 158 00a0 0000803F 		.word	1065353216
 159 00a4 0000803F 		.word	1065353216
 160 00a8 0000803F 		.word	1065353216
 161 00ac 0000803F 		.word	1065353216
 162 00b0 0000803F 		.word	1065353216
 163 00b4 0000803F 		.word	1065353216
 164 00b8 0000803F 		.word	1065353216
 165 00bc 0000803F 		.word	1065353216
 166 00c0 0000803F 		.word	1065353216
 167 00c4 0000803F 		.word	1065353216
 168 00c8 00000000 		.word	0
 169 00cc 00000000 		.word	0
 170 00d0 00000000 		.word	0
 171 00d4 00000000 		.word	0
 172 00d8 00000000 		.word	0
 173 00dc 00000000 		.word	0
 174              		.global	__aeabi_i2f
 175              		.global	__aeabi_fadd
 176              		.global	__aeabi_f2iz
 177              		.section	.text.get_pt,"ax",%progbits
 178              		.align	2
 179              		.global	get_pt
 180              		.code	16
 181              		.thumb_func
 183              	get_pt:
 184              	.LFB2:
  37:ECE209-proj.c **** 
  38:ECE209-proj.c ****     float weight[28] = 
  39:ECE209-proj.c **** {0.243106,0.553743,0.777093,0.099247,0.541075,0.772392,0.835409,0.438045,0.198887,0.011788,
  40:ECE209-proj.c ****  0.605223,0.587725,0.404945,0.500636,0.578877,0.638513,0.574408,0.094848,0.209278,0.034183,
  41:ECE209-proj.c ****  0.453673,0.769301,0.283175,0.456955,0.485850,0.305770,0.621719,0.684782};
  42:ECE209-proj.c **** float imagePixel[28] = {0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0};
  43:ECE209-proj.c **** 
  44:ECE209-proj.c **** uint8_t get_pt(uint8_t* pt)
  45:ECE209-proj.c **** {
 185              		.loc 1 45 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 32
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 80B5     		push	{r7, lr}
 190              	.LCFI6:
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 88B0     		sub	sp, sp, #32
 195              	.LCFI7:
 196              		.cfi_def_cfa_offset 40
 197 0004 00AF     		add	r7, sp, #0
 198              	.LCFI8:
 199              		.cfi_def_cfa_register 7
 200 0006 7860     		str	r0, [r7, #4]
  46:ECE209-proj.c **** 	/**********************************
  47:ECE209-proj.c **** 	* Start user-specific code here. */
  48:ECE209-proj.c ****     
  49:ECE209-proj.c ****     float result = 0.512558f;
 201              		.loc 1 49 0
 202 0008 324B     		ldr	r3, .L12
 203 000a 3B61     		str	r3, [r7, #16]
  50:ECE209-proj.c ****     
  51:ECE209-proj.c **** 	trigger_high();
 204              		.loc 1 51 0
 205 000c FFF7FEFF 		bl	trigger_high
  52:ECE209-proj.c ****     
  53:ECE209-proj.c ****     /* Section for floating point zero and nozero multiplication
  54:ECE209-proj.c ****     float vals[14] = {0.0f,5.0f,0.0f,5.0f,0.0f,5.0f,0.0f,5.0f,0.0f,5.0f,0.0f,5.0f,0.0f,5.0f}
  55:ECE209-proj.c ****     float res = 0.0f;
  56:ECE209-proj.c ****     for(int i = 0; i < 14; i++){
  57:ECE209-proj.c ****         res += vals[i] * 5.0f;
  58:ECE209-proj.c ****     }
  59:ECE209-proj.c ****     */
  60:ECE209-proj.c ****     
  61:ECE209-proj.c ****     /* Section for attacking convolutional neural networks with floating point
  62:ECE209-proj.c ****     for(int i = 0; i < 14; i++) {
  63:ECE209-proj.c ****         result += weight[i]*imagePixel[i];
  64:ECE209-proj.c ****     }
  65:ECE209-proj.c ****     */
  66:ECE209-proj.c ****     
  67:ECE209-proj.c ****     /* Section for integer zero and nozero adds
  68:ECE209-proj.c ****     int res = 5;
  69:ECE209-proj.c ****     for(int i = 0; i < 14; i++) {
  70:ECE209-proj.c ****         res += 5;
  71:ECE209-proj.c ****     }
  72:ECE209-proj.c ****     float k = 5.0f * 6.0f;
  73:ECE209-proj.c ****     
  74:ECE209-proj.c ****     for(int i = 0; i < 14; i++) {
  75:ECE209-proj.c ****         res += 0;
  76:ECE209-proj.c ****     }
  77:ECE209-proj.c ****     k = 5.0f * k;
  78:ECE209-proj.c ****     */
  79:ECE209-proj.c ****     
  80:ECE209-proj.c **** 	
  81:ECE209-proj.c ****    /* Section for integer zero and nonzero adds with memory accesses.
  82:ECE209-proj.c ****     int res = 5;
  83:ECE209-proj.c ****     int nonzero[14] = {5,5,5,5,5,5,5,5,5,5,5,5,5,5};
  84:ECE209-proj.c ****     for(int i = 0; i < 14; i++) {
  85:ECE209-proj.c ****         res += nonzero[i];
  86:ECE209-proj.c ****     }
  87:ECE209-proj.c ****     float k = 5.0f * 6.0f;
  88:ECE209-proj.c ****     int zero[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  89:ECE209-proj.c ****     
  90:ECE209-proj.c ****     for(int i = 0; i < 14; i++) {
  91:ECE209-proj.c ****         res += zero[i];
  92:ECE209-proj.c ****     }
  93:ECE209-proj.c ****     k = 5.0f * k;
  94:ECE209-proj.c ****     */
  95:ECE209-proj.c ****     
  96:ECE209-proj.c ****     /* Section for attacking a binary convolutional neural network
  97:ECE209-proj.c ****     int pop_count = 0;
  98:ECE209-proj.c ****     unsigned char val1 = 0xFF;
  99:ECE209-proj.c ****     unsigned char val2 = 0xAA;
 100:ECE209-proj.c ****     unsigned char res = ~(val1 ^ val2);
 101:ECE209-proj.c ****     
 102:ECE209-proj.c ****     for(int i = 0 ; i < 8; i++){
 103:ECE209-proj.c ****         pop_count += (res & 1);
 104:ECE209-proj.c ****         res >>= 1;    
 105:ECE209-proj.c ****     }
 106:ECE209-proj.c ****     
 107:ECE209-proj.c ****     float k = 5.0f * 6.0f;
 108:ECE209-proj.c ****     (void)k;
 109:ECE209-proj.c ****     
 110:ECE209-proj.c ****     pop_count = 0;
 111:ECE209-proj.c ****     val1 = 0x00;
 112:ECE209-proj.c ****     val2 = 0xAA;
 113:ECE209-proj.c ****     res = ~(val1 ^ val2);
 114:ECE209-proj.c ****     
 115:ECE209-proj.c ****     for(int i = 0 ; i < 8; i++){
 116:ECE209-proj.c ****         pop_count += (res & 1);
 117:ECE209-proj.c ****         res >>= 1;    
 118:ECE209-proj.c ****     }
 119:ECE209-proj.c ****     */
 120:ECE209-proj.c ****     
 121:ECE209-proj.c ****     /* Section for floating zero and nonzero adds with memory accesses.
 122:ECE209-proj.c ****     float res = 5.0f;
 123:ECE209-proj.c ****     int nonzero[14] = {5.0f,5.0f,5.0f,5.0f,5.0f,5.0f,5.0f,5.0f,5.0f,5.0f,5.0f,5.0f,5.0f,5.0f};
 124:ECE209-proj.c ****     for(int i = 0; i < 14; i++) {
 125:ECE209-proj.c ****         res += nonzero[i];
 126:ECE209-proj.c ****     }
 127:ECE209-proj.c ****     float k = 5.0f * 6.0f;
 128:ECE209-proj.c ****     int zero[14] = {0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f};
 129:ECE209-proj.c ****     
 130:ECE209-proj.c ****     for(int i = 0; i < 14; i++) {
 131:ECE209-proj.c ****         res += zero[i];
 132:ECE209-proj.c ****     }
 133:ECE209-proj.c ****     k = 5.0f * k;
 134:ECE209-proj.c ****     */
 135:ECE209-proj.c ****     
 136:ECE209-proj.c ****       
 137:ECE209-proj.c ****     // Section for second attempt attacking a binary convolutional neural network
 138:ECE209-proj.c ****     float pop_count = 0.0f;
 206              		.loc 1 138 0
 207 0010 0023     		movs	r3, #0
 208 0012 FB61     		str	r3, [r7, #28]
 139:ECE209-proj.c ****     unsigned char val1 = 0xFF;
 209              		.loc 1 139 0
 210 0014 0F23     		movs	r3, #15
 211 0016 FB18     		adds	r3, r7, r3
 212 0018 FF22     		movs	r2, #255
 213 001a 1A70     		strb	r2, [r3]
 140:ECE209-proj.c ****     unsigned char val2 = 0xAA;
 214              		.loc 1 140 0
 215 001c 0E23     		movs	r3, #14
 216 001e FB18     		adds	r3, r7, r3
 217 0020 AA22     		movs	r2, #170
 218 0022 1A70     		strb	r2, [r3]
 141:ECE209-proj.c ****     unsigned char res = ~(val1 ^ val2);
 219              		.loc 1 141 0
 220 0024 0F23     		movs	r3, #15
 221 0026 FA18     		adds	r2, r7, r3
 222 0028 0E23     		movs	r3, #14
 223 002a FB18     		adds	r3, r7, r3
 224 002c 1278     		ldrb	r2, [r2]
 225 002e 1B78     		ldrb	r3, [r3]
 226 0030 5340     		eors	r3, r2
 227 0032 DAB2     		uxtb	r2, r3
 228 0034 1B23     		movs	r3, #27
 229 0036 FB18     		adds	r3, r7, r3
 230 0038 D243     		mvns	r2, r2
 231 003a 1A70     		strb	r2, [r3]
 142:ECE209-proj.c ****     
 143:ECE209-proj.c ****     /*
 144:ECE209-proj.c ****     for(int i = 0 ; i < 8; i++){
 145:ECE209-proj.c ****         pop_count += (res & 1);
 146:ECE209-proj.c ****         res >>= 1;    
 147:ECE209-proj.c ****     }
 148:ECE209-proj.c ****     */
 149:ECE209-proj.c ****     
 150:ECE209-proj.c ****     pop_count = 0.0f;
 232              		.loc 1 150 0
 233 003c 0023     		movs	r3, #0
 234 003e FB61     		str	r3, [r7, #28]
 151:ECE209-proj.c ****     val1 = 0x00;
 235              		.loc 1 151 0
 236 0040 0F23     		movs	r3, #15
 237 0042 FB18     		adds	r3, r7, r3
 238 0044 0022     		movs	r2, #0
 239 0046 1A70     		strb	r2, [r3]
 152:ECE209-proj.c ****     val2 = 0xAA;
 240              		.loc 1 152 0
 241 0048 0E23     		movs	r3, #14
 242 004a FB18     		adds	r3, r7, r3
 243 004c AA22     		movs	r2, #170
 244 004e 1A70     		strb	r2, [r3]
 153:ECE209-proj.c ****     res = ~(val1 ^ val2);
 245              		.loc 1 153 0
 246 0050 0F23     		movs	r3, #15
 247 0052 FA18     		adds	r2, r7, r3
 248 0054 0E23     		movs	r3, #14
 249 0056 FB18     		adds	r3, r7, r3
 250 0058 1278     		ldrb	r2, [r2]
 251 005a 1B78     		ldrb	r3, [r3]
 252 005c 5340     		eors	r3, r2
 253 005e DAB2     		uxtb	r2, r3
 254 0060 1B23     		movs	r3, #27
 255 0062 FB18     		adds	r3, r7, r3
 256 0064 D243     		mvns	r2, r2
 257 0066 1A70     		strb	r2, [r3]
 258              	.LBB3:
 154:ECE209-proj.c ****     
 155:ECE209-proj.c ****     for(int i = 0 ; i < 8; i++){
 259              		.loc 1 155 0
 260 0068 0023     		movs	r3, #0
 261 006a 7B61     		str	r3, [r7, #20]
 262 006c 18E0     		b	.L9
 263              	.L10:
 156:ECE209-proj.c ****         pop_count += (res & 1);
 264              		.loc 1 156 0 discriminator 3
 265 006e 1B23     		movs	r3, #27
 266 0070 FB18     		adds	r3, r7, r3
 267 0072 1B78     		ldrb	r3, [r3]
 268 0074 0122     		movs	r2, #1
 269 0076 1340     		ands	r3, r2
 270 0078 1800     		movs	r0, r3
 271 007a FFF7FEFF 		bl	__aeabi_i2f
 272 007e 031C     		adds	r3, r0, #0
 273 0080 191C     		adds	r1, r3, #0
 274 0082 F869     		ldr	r0, [r7, #28]
 275 0084 FFF7FEFF 		bl	__aeabi_fadd
 276 0088 031C     		adds	r3, r0, #0
 277 008a FB61     		str	r3, [r7, #28]
 157:ECE209-proj.c ****         res >>= 1;    
 278              		.loc 1 157 0 discriminator 3
 279 008c 1B23     		movs	r3, #27
 280 008e FB18     		adds	r3, r7, r3
 281 0090 1B22     		movs	r2, #27
 282 0092 BA18     		adds	r2, r7, r2
 283 0094 1278     		ldrb	r2, [r2]
 284 0096 5208     		lsrs	r2, r2, #1
 285 0098 1A70     		strb	r2, [r3]
 155:ECE209-proj.c ****         pop_count += (res & 1);
 286              		.loc 1 155 0 discriminator 3
 287 009a 7B69     		ldr	r3, [r7, #20]
 288 009c 0133     		adds	r3, r3, #1
 289 009e 7B61     		str	r3, [r7, #20]
 290              	.L9:
 155:ECE209-proj.c ****         pop_count += (res & 1);
 291              		.loc 1 155 0 is_stmt 0 discriminator 1
 292 00a0 7B69     		ldr	r3, [r7, #20]
 293 00a2 072B     		cmp	r3, #7
 294 00a4 E3DD     		ble	.L10
 295              	.LBE3:
 158:ECE209-proj.c ****     }
 159:ECE209-proj.c ****     
 160:ECE209-proj.c ****     
 161:ECE209-proj.c ****     delay_2_ms();
 296              		.loc 1 161 0 is_stmt 1
 297 00a6 FFF7FEFF 		bl	delay_2_ms
 162:ECE209-proj.c ****     trigger_low();
 298              		.loc 1 162 0
 299 00aa FFF7FEFF 		bl	trigger_low
 163:ECE209-proj.c ****     pt[0] = (int)result;
 300              		.loc 1 163 0
 301 00ae 3869     		ldr	r0, [r7, #16]
 302 00b0 FFF7FEFF 		bl	__aeabi_f2iz
 303 00b4 0300     		movs	r3, r0
 304 00b6 DAB2     		uxtb	r2, r3
 305 00b8 7B68     		ldr	r3, [r7, #4]
 306 00ba 1A70     		strb	r2, [r3]
 164:ECE209-proj.c **** 	/* End user-specific code here. *
 165:ECE209-proj.c **** 	********************************/
 166:ECE209-proj.c **** 	simpleserial_put('r', 16, pt);
 307              		.loc 1 166 0
 308 00bc 7B68     		ldr	r3, [r7, #4]
 309 00be 1A00     		movs	r2, r3
 310 00c0 1021     		movs	r1, #16
 311 00c2 7220     		movs	r0, #114
 312 00c4 FFF7FEFF 		bl	simpleserial_put
 167:ECE209-proj.c **** 	return 0x00;
 313              		.loc 1 167 0
 314 00c8 0023     		movs	r3, #0
 168:ECE209-proj.c **** }
 315              		.loc 1 168 0
 316 00ca 1800     		movs	r0, r3
 317 00cc BD46     		mov	sp, r7
 318 00ce 08B0     		add	sp, sp, #32
 319              		@ sp needed
 320 00d0 80BD     		pop	{r7, pc}
 321              	.L13:
 322 00d2 C046     		.align	2
 323              	.L12:
 324 00d4 0037033F 		.word	1057175296
 325              		.cfi_endproc
 326              	.LFE2:
 328              		.section	.text.reset,"ax",%progbits
 329              		.align	2
 330              		.global	reset
 331              		.code	16
 332              		.thumb_func
 334              	reset:
 335              	.LFB3:
 169:ECE209-proj.c **** 
 170:ECE209-proj.c **** uint8_t reset(uint8_t* x)
 171:ECE209-proj.c **** {
 336              		.loc 1 171 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 8
 339              		@ frame_needed = 1, uses_anonymous_args = 0
 340 0000 80B5     		push	{r7, lr}
 341              	.LCFI9:
 342              		.cfi_def_cfa_offset 8
 343              		.cfi_offset 7, -8
 344              		.cfi_offset 14, -4
 345 0002 82B0     		sub	sp, sp, #8
 346              	.LCFI10:
 347              		.cfi_def_cfa_offset 16
 348 0004 00AF     		add	r7, sp, #0
 349              	.LCFI11:
 350              		.cfi_def_cfa_register 7
 351 0006 7860     		str	r0, [r7, #4]
 172:ECE209-proj.c **** 	// Reset key here if needed
 173:ECE209-proj.c **** 	return 0x00;
 352              		.loc 1 173 0
 353 0008 0023     		movs	r3, #0
 174:ECE209-proj.c **** }
 354              		.loc 1 174 0
 355 000a 1800     		movs	r0, r3
 356 000c BD46     		mov	sp, r7
 357 000e 02B0     		add	sp, sp, #8
 358              		@ sp needed
 359 0010 80BD     		pop	{r7, pc}
 360              		.cfi_endproc
 361              	.LFE3:
 363 0012 C046     		.section	.text.main,"ax",%progbits
 364              		.align	2
 365              		.global	main
 366              		.code	16
 367              		.thumb_func
 369              	main:
 370              	.LFB4:
 175:ECE209-proj.c **** 
 176:ECE209-proj.c **** int main(void)
 177:ECE209-proj.c **** {
 371              		.loc 1 177 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 1, uses_anonymous_args = 0
 375 0000 80B5     		push	{r7, lr}
 376              	.LCFI12:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 7, -8
 379              		.cfi_offset 14, -4
 380 0002 00AF     		add	r7, sp, #0
 381              	.LCFI13:
 382              		.cfi_def_cfa_register 7
 178:ECE209-proj.c ****     platform_init();
 383              		.loc 1 178 0
 384 0004 FFF7FEFF 		bl	platform_init
 179:ECE209-proj.c **** 	init_uart();	
 385              		.loc 1 179 0
 386 0008 FFF7FEFF 		bl	init_uart
 180:ECE209-proj.c **** 	trigger_setup();
 387              		.loc 1 180 0
 388 000c FFF7FEFF 		bl	trigger_setup
 181:ECE209-proj.c **** 	
 182:ECE209-proj.c ****  	/* Uncomment this to get a HELLO message for debug */
 183:ECE209-proj.c **** 	/*
 184:ECE209-proj.c **** 	putch('h');
 185:ECE209-proj.c **** 	putch('e');
 186:ECE209-proj.c **** 	putch('l');
 187:ECE209-proj.c **** 	putch('l');
 188:ECE209-proj.c **** 	putch('o');
 189:ECE209-proj.c **** 	putch('\n');
 190:ECE209-proj.c **** 	*/
 191:ECE209-proj.c **** 		
 192:ECE209-proj.c **** 	simpleserial_init();		
 389              		.loc 1 192 0
 390 0010 FFF7FEFF 		bl	simpleserial_init
 193:ECE209-proj.c **** 	simpleserial_addcmd('k', 16, get_key);
 391              		.loc 1 193 0
 392 0014 0A4B     		ldr	r3, .L18
 393 0016 1A00     		movs	r2, r3
 394 0018 1021     		movs	r1, #16
 395 001a 6B20     		movs	r0, #107
 396 001c FFF7FEFF 		bl	simpleserial_addcmd
 194:ECE209-proj.c **** 	simpleserial_addcmd('p', 16, get_pt);
 397              		.loc 1 194 0
 398 0020 084B     		ldr	r3, .L18+4
 399 0022 1A00     		movs	r2, r3
 400 0024 1021     		movs	r1, #16
 401 0026 7020     		movs	r0, #112
 402 0028 FFF7FEFF 		bl	simpleserial_addcmd
 195:ECE209-proj.c **** 	simpleserial_addcmd('x', 0, reset);
 403              		.loc 1 195 0
 404 002c 064B     		ldr	r3, .L18+8
 405 002e 1A00     		movs	r2, r3
 406 0030 0021     		movs	r1, #0
 407 0032 7820     		movs	r0, #120
 408 0034 FFF7FEFF 		bl	simpleserial_addcmd
 409              	.L17:
 196:ECE209-proj.c **** 	while(1)
 197:ECE209-proj.c **** 		simpleserial_get();
 410              		.loc 1 197 0 discriminator 1
 411 0038 FFF7FEFF 		bl	simpleserial_get
 412 003c FCE7     		b	.L17
 413              	.L19:
 414 003e C046     		.align	2
 415              	.L18:
 416 0040 00000000 		.word	get_key
 417 0044 00000000 		.word	get_pt
 418 0048 00000000 		.word	reset
 419              		.cfi_endproc
 420              	.LFE4:
 422              		.text
 423              	.Letext0:
 424              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 425              		.file 3 "/usr/include/newlib/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ECE209-proj.c
     /tmp/ccaDMoKX.s:20     .text.get_key:0000000000000000 $t
     /tmp/ccaDMoKX.s:25     .text.get_key:0000000000000000 get_key
     /tmp/ccaDMoKX.s:56     .text.delay_2_ms:0000000000000000 $t
     /tmp/ccaDMoKX.s:60     .text.delay_2_ms:0000000000000000 delay_2_ms
     /tmp/ccaDMoKX.s:103    .text.delay_2_ms:0000000000000024 $d
     /tmp/ccaDMoKX.s:112    .data:0000000000000000 weight
     /tmp/ccaDMoKX.s:109    .data:0000000000000000 $d
     /tmp/ccaDMoKX.s:145    .data:0000000000000070 imagePixel
     /tmp/ccaDMoKX.s:178    .text.get_pt:0000000000000000 $t
     /tmp/ccaDMoKX.s:183    .text.get_pt:0000000000000000 get_pt
     /tmp/ccaDMoKX.s:324    .text.get_pt:00000000000000d4 $d
     /tmp/ccaDMoKX.s:329    .text.reset:0000000000000000 $t
     /tmp/ccaDMoKX.s:334    .text.reset:0000000000000000 reset
     /tmp/ccaDMoKX.s:364    .text.main:0000000000000000 $t
     /tmp/ccaDMoKX.s:369    .text.main:0000000000000000 main
     /tmp/ccaDMoKX.s:416    .text.main:0000000000000040 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fadd
__aeabi_f2iz
trigger_high
trigger_low
simpleserial_put
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_get
